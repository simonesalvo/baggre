// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.0
//   Build date: 2014-10-28 17:08:27 UTC
//   on: 2014-10-30, 17:11:04 UTC
//   C++ generator version:

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   Drive API (drive/v2)
// Generated from:
//   Version: v2
//   Revision: 151
// Generated by:
//    Tool: google-apis-code-generator 1.5.0
//     C++: 0.1.2
#ifndef  GOOGLE_DRIVE_API_COMMENT_REPLY_H_
#define  GOOGLE_DRIVE_API_COMMENT_REPLY_H_

#include <string>
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/client/util/date_time.h"
#include "googleapis/strings/stringpiece.h"

#include "google/drive_api/user.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_drive_api {
using namespace googleapis;

/**
 * A JSON representation of a reply to a comment on a file in Google Drive.
 *
 * @ingroup DataObject
 */
class CommentReply : public client::JsonCppData {
 public:

  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static CommentReply* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit CommentReply(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit CommentReply(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~CommentReply();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_drive_api::CommentReply</code>
   */
  const StringPiece GetTypeName() const {
    return StringPiece("google_drive_api::CommentReply");
  }

  /**
   * Determine if the '<code>author</code>' attribute was set.
   *
   * @return true if the '<code>author</code>' attribute was set.
   */
  bool has_author() const {
    return Storage().isMember("author");
  }

  /**
   * Clears the '<code>author</code>' attribute.
   */
  void clear_author() {
    MutableStorage()->removeMember("author");
  }


  /**
   * Get a reference to the value of the '<code>author</code>' attribute.
   */
  const User get_author() const {
     const Json::Value& storage = Storage("author");
    return client::JsonValueToCppValueHelper<User >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>author</code>' property.
   *
   * The user who wrote this reply.
   *
   * @return The result can be modified to change the attribute value.
   */
  User mutable_author() {
    Json::Value* storage = MutableStorage("author");
    return client::JsonValueToMutableCppValueHelper<User >(storage);
  }

  /**
   * Determine if the '<code>content</code>' attribute was set.
   *
   * @return true if the '<code>content</code>' attribute was set.
   */
  bool has_content() const {
    return Storage().isMember("content");
  }

  /**
   * Clears the '<code>content</code>' attribute.
   */
  void clear_content() {
    MutableStorage()->removeMember("content");
  }


  /**
   * Get the value of the '<code>content</code>' attribute.
   */
  const StringPiece get_content() const {
    const Json::Value& v = Storage("content");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>content</code>' attribute.
   *
   * The plain text content used to create this reply. This is not HTML safe and
   * should only be used as a starting point to make edits to a reply's content.
   * This field is required on inserts if no verb is specified (resolve/reopen).
   *
   * @param[in] value The new value.
   */
  void set_content(const StringPiece& value) {
    *MutableStorage("content") = value.data();
  }

  /**
   * Determine if the '<code>createdDate</code>' attribute was set.
   *
   * @return true if the '<code>createdDate</code>' attribute was set.
   */
  bool has_created_date() const {
    return Storage().isMember("createdDate");
  }

  /**
   * Clears the '<code>createdDate</code>' attribute.
   */
  void clear_created_date() {
    MutableStorage()->removeMember("createdDate");
  }


  /**
   * Get the value of the '<code>createdDate</code>' attribute.
   */
  client::DateTime get_created_date() const {
    const Json::Value& storage = Storage("createdDate");
    return client::JsonValueToCppValueHelper<client::DateTime >(storage);
  }

  /**
   * Change the '<code>createdDate</code>' attribute.
   *
   * The date when this reply was first created.
   *
   * @param[in] value The new value.
   */
  void set_created_date(client::DateTime value) {
    client::SetJsonValueFromCppValueHelper<client::DateTime >(
      value, MutableStorage("createdDate"));
  }

  /**
   * Determine if the '<code>deleted</code>' attribute was set.
   *
   * @return true if the '<code>deleted</code>' attribute was set.
   */
  bool has_deleted() const {
    return Storage().isMember("deleted");
  }

  /**
   * Clears the '<code>deleted</code>' attribute.
   */
  void clear_deleted() {
    MutableStorage()->removeMember("deleted");
  }


  /**
   * Get the value of the '<code>deleted</code>' attribute.
   */
  bool get_deleted() const {
    const Json::Value& storage = Storage("deleted");
    return client::JsonValueToCppValueHelper<bool >(storage);
  }

  /**
   * Change the '<code>deleted</code>' attribute.
   *
   * Whether this reply has been deleted. If a reply has been deleted the
   * content will be cleared and this will only represent a reply that once
   * existed.
   *
   * @param[in] value The new value.
   */
  void set_deleted(bool value) {
    client::SetJsonValueFromCppValueHelper<bool >(
      value, MutableStorage("deleted"));
  }

  /**
   * Determine if the '<code>htmlContent</code>' attribute was set.
   *
   * @return true if the '<code>htmlContent</code>' attribute was set.
   */
  bool has_html_content() const {
    return Storage().isMember("htmlContent");
  }

  /**
   * Clears the '<code>htmlContent</code>' attribute.
   */
  void clear_html_content() {
    MutableStorage()->removeMember("htmlContent");
  }


  /**
   * Get the value of the '<code>htmlContent</code>' attribute.
   */
  const StringPiece get_html_content() const {
    const Json::Value& v = Storage("htmlContent");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>htmlContent</code>' attribute.
   *
   * HTML formatted content for this reply.
   *
   * @param[in] value The new value.
   */
  void set_html_content(const StringPiece& value) {
    *MutableStorage("htmlContent") = value.data();
  }

  /**
   * Determine if the '<code>kind</code>' attribute was set.
   *
   * @return true if the '<code>kind</code>' attribute was set.
   */
  bool has_kind() const {
    return Storage().isMember("kind");
  }

  /**
   * Clears the '<code>kind</code>' attribute.
   */
  void clear_kind() {
    MutableStorage()->removeMember("kind");
  }


  /**
   * Get the value of the '<code>kind</code>' attribute.
   */
  const StringPiece get_kind() const {
    const Json::Value& v = Storage("kind");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>kind</code>' attribute.
   *
   * This is always drive#commentReply.
   *
   * @param[in] value The new value.
   */
  void set_kind(const StringPiece& value) {
    *MutableStorage("kind") = value.data();
  }

  /**
   * Determine if the '<code>modifiedDate</code>' attribute was set.
   *
   * @return true if the '<code>modifiedDate</code>' attribute was set.
   */
  bool has_modified_date() const {
    return Storage().isMember("modifiedDate");
  }

  /**
   * Clears the '<code>modifiedDate</code>' attribute.
   */
  void clear_modified_date() {
    MutableStorage()->removeMember("modifiedDate");
  }


  /**
   * Get the value of the '<code>modifiedDate</code>' attribute.
   */
  client::DateTime get_modified_date() const {
    const Json::Value& storage = Storage("modifiedDate");
    return client::JsonValueToCppValueHelper<client::DateTime >(storage);
  }

  /**
   * Change the '<code>modifiedDate</code>' attribute.
   *
   * The date when this reply was last modified.
   *
   * @param[in] value The new value.
   */
  void set_modified_date(client::DateTime value) {
    client::SetJsonValueFromCppValueHelper<client::DateTime >(
      value, MutableStorage("modifiedDate"));
  }

  /**
   * Determine if the '<code>replyId</code>' attribute was set.
   *
   * @return true if the '<code>replyId</code>' attribute was set.
   */
  bool has_reply_id() const {
    return Storage().isMember("replyId");
  }

  /**
   * Clears the '<code>replyId</code>' attribute.
   */
  void clear_reply_id() {
    MutableStorage()->removeMember("replyId");
  }


  /**
   * Get the value of the '<code>replyId</code>' attribute.
   */
  const StringPiece get_reply_id() const {
    const Json::Value& v = Storage("replyId");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>replyId</code>' attribute.
   *
   * The ID of the reply.
   *
   * @param[in] value The new value.
   */
  void set_reply_id(const StringPiece& value) {
    *MutableStorage("replyId") = value.data();
  }

  /**
   * Determine if the '<code>verb</code>' attribute was set.
   *
   * @return true if the '<code>verb</code>' attribute was set.
   */
  bool has_verb() const {
    return Storage().isMember("verb");
  }

  /**
   * Clears the '<code>verb</code>' attribute.
   */
  void clear_verb() {
    MutableStorage()->removeMember("verb");
  }


  /**
   * Get the value of the '<code>verb</code>' attribute.
   */
  const StringPiece get_verb() const {
    const Json::Value& v = Storage("verb");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>verb</code>' attribute.
   *
   * The action this reply performed to the parent comment. When creating a new
   * reply this is the action to be perform to the parent comment. Possible
   * values are:
   * <dl>
   * <dt>"resolve"
   * <dd>To resolve a comment.
   * <dt>"reopen"
   * <dd>To reopen (un-resolve) a comment.
   * </dl>
   *
   *
   * @param[in] value The new value.
   */
  void set_verb(const StringPiece& value) {
    *MutableStorage("verb") = value.data();
  }

 private:
  void operator=(const CommentReply&);
};  // CommentReply
}  // namespace google_drive_api
#endif  // GOOGLE_DRIVE_API_COMMENT_REPLY_H_
