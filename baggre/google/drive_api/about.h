// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.0
//   Build date: 2014-10-28 17:08:27 UTC
//   on: 2014-10-30, 17:11:04 UTC
//   C++ generator version:

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   Drive API (drive/v2)
// Generated from:
//   Version: v2
//   Revision: 151
// Generated by:
//    Tool: google-apis-code-generator 1.5.0
//     C++: 0.1.2
#ifndef  GOOGLE_DRIVE_API_ABOUT_H_
#define  GOOGLE_DRIVE_API_ABOUT_H_

#include <string>
#include "googleapis/base/integral_types.h"
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"

#include "google/drive_api/user.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_drive_api {
using namespace googleapis;

/**
 * An item with user information and settings.
 *
 * @ingroup DataObject
 */
class About : public client::JsonCppData {
 public:

  /**
   * No description provided.
   *
   * @ingroup DataObject
   */
  class AboutAdditionalRoleInfo : public client::JsonCppData {
   public:

    /**
     * No description provided.
     *
     * @ingroup DataObject
     */
    class AboutAdditionalRoleInfoRoleSets : public client::JsonCppData {
     public:

      /**
       * Creates a new default instance.
       *
       * @return Ownership is passed back to the caller.
       */
      static AboutAdditionalRoleInfoRoleSets* New();

      /**
       * Standard constructor for an immutable data object instance.
       *
       * @param[in] storage  The underlying data storage for this instance.
       */
      explicit AboutAdditionalRoleInfoRoleSets(const Json::Value& storage);

      /**
       * Standard constructor for a mutable data object instance.
       *
       * @param[in] storage  The underlying data storage for this instance.
       */
      explicit AboutAdditionalRoleInfoRoleSets(Json::Value* storage);

      /**
       * Standard destructor.
       */
      virtual ~AboutAdditionalRoleInfoRoleSets();

      /**
       * Returns a string denoting the type of this data object.
       *
       * @return <code>google_drive_api::AboutAdditionalRoleInfoRoleSets</code>
       */
      const StringPiece GetTypeName() const {
        return StringPiece("google_drive_api::AboutAdditionalRoleInfoRoleSets");
      }

      /**
       * Determine if the '<code>additionalRoles</code>' attribute was set.
       *
       * @return true if the '<code>additionalRoles</code>' attribute was set.
       */
      bool has_additional_roles() const {
        return Storage().isMember("additionalRoles");
      }

      /**
       * Clears the '<code>additionalRoles</code>' attribute.
       */
      void clear_additional_roles() {
        MutableStorage()->removeMember("additionalRoles");
      }


      /**
       * Get a reference to the value of the '<code>additionalRoles</code>'
       * attribute.
       */
      const client::JsonCppArray<string > get_additional_roles() const {
         const Json::Value& storage = Storage("additionalRoles");
        return client::JsonValueToCppValueHelper<client::JsonCppArray<string > >(storage);
      }

      /**
       * Gets a reference to a mutable value of the
       * '<code>additionalRoles</code>' property.
       *
       * The supported additional roles with the primary role.
       *
       * @return The result can be modified to change the attribute value.
       */
      client::JsonCppArray<string > mutable_additionalRoles() {
        Json::Value* storage = MutableStorage("additionalRoles");
        return client::JsonValueToMutableCppValueHelper<client::JsonCppArray<string > >(storage);
      }

      /**
       * Determine if the '<code>primaryRole</code>' attribute was set.
       *
       * @return true if the '<code>primaryRole</code>' attribute was set.
       */
      bool has_primary_role() const {
        return Storage().isMember("primaryRole");
      }

      /**
       * Clears the '<code>primaryRole</code>' attribute.
       */
      void clear_primary_role() {
        MutableStorage()->removeMember("primaryRole");
      }


      /**
       * Get the value of the '<code>primaryRole</code>' attribute.
       */
      const StringPiece get_primary_role() const {
        const Json::Value& v = Storage("primaryRole");
        if (v == Json::Value::null) return StringPiece("");
        return StringPiece(v.asCString());
      }

      /**
       * Change the '<code>primaryRole</code>' attribute.
       *
       * A primary permission role.
       *
       * @param[in] value The new value.
       */
      void set_primary_role(const StringPiece& value) {
        *MutableStorage("primaryRole") = value.data();
      }

     private:
      void operator=(const AboutAdditionalRoleInfoRoleSets&);
    };  // AboutAdditionalRoleInfoRoleSets
    /**
     * Creates a new default instance.
     *
     * @return Ownership is passed back to the caller.
     */
    static AboutAdditionalRoleInfo* New();

    /**
     * Standard constructor for an immutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit AboutAdditionalRoleInfo(const Json::Value& storage);

    /**
     * Standard constructor for a mutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit AboutAdditionalRoleInfo(Json::Value* storage);

    /**
     * Standard destructor.
     */
    virtual ~AboutAdditionalRoleInfo();

    /**
     * Returns a string denoting the type of this data object.
     *
     * @return <code>google_drive_api::AboutAdditionalRoleInfo</code>
     */
    const StringPiece GetTypeName() const {
      return StringPiece("google_drive_api::AboutAdditionalRoleInfo");
    }

    /**
     * Determine if the '<code>roleSets</code>' attribute was set.
     *
     * @return true if the '<code>roleSets</code>' attribute was set.
     */
    bool has_role_sets() const {
      return Storage().isMember("roleSets");
    }

    /**
     * Clears the '<code>roleSets</code>' attribute.
     */
    void clear_role_sets() {
      MutableStorage()->removeMember("roleSets");
    }


    /**
     * Get a reference to the value of the '<code>roleSets</code>' attribute.
     */
    const client::JsonCppArray<AboutAdditionalRoleInfoRoleSets > get_role_sets() const {
       const Json::Value& storage = Storage("roleSets");
      return client::JsonValueToCppValueHelper<client::JsonCppArray<AboutAdditionalRoleInfoRoleSets > >(storage);
    }

    /**
     * Gets a reference to a mutable value of the '<code>roleSets</code>'
     * property.
     *
     * The supported additional roles per primary role.
     *
     * @return The result can be modified to change the attribute value.
     */
    client::JsonCppArray<AboutAdditionalRoleInfoRoleSets > mutable_roleSets() {
      Json::Value* storage = MutableStorage("roleSets");
      return client::JsonValueToMutableCppValueHelper<client::JsonCppArray<AboutAdditionalRoleInfoRoleSets > >(storage);
    }

    /**
     * Determine if the '<code>type</code>' attribute was set.
     *
     * @return true if the '<code>type</code>' attribute was set.
     */
    bool has_type() const {
      return Storage().isMember("type");
    }

    /**
     * Clears the '<code>type</code>' attribute.
     */
    void clear_type() {
      MutableStorage()->removeMember("type");
    }


    /**
     * Get the value of the '<code>type</code>' attribute.
     */
    const StringPiece get_type() const {
      const Json::Value& v = Storage("type");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>type</code>' attribute.
     *
     * The content type that this additional role info applies to.
     *
     * @param[in] value The new value.
     */
    void set_type(const StringPiece& value) {
      *MutableStorage("type") = value.data();
    }

   private:
    void operator=(const AboutAdditionalRoleInfo&);
  };  // AboutAdditionalRoleInfo
  /**
   * No description provided.
   *
   * @ingroup DataObject
   */
  class AboutExportFormats : public client::JsonCppData {
   public:

    /**
     * Creates a new default instance.
     *
     * @return Ownership is passed back to the caller.
     */
    static AboutExportFormats* New();

    /**
     * Standard constructor for an immutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit AboutExportFormats(const Json::Value& storage);

    /**
     * Standard constructor for a mutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit AboutExportFormats(Json::Value* storage);

    /**
     * Standard destructor.
     */
    virtual ~AboutExportFormats();

    /**
     * Returns a string denoting the type of this data object.
     *
     * @return <code>google_drive_api::AboutExportFormats</code>
     */
    const StringPiece GetTypeName() const {
      return StringPiece("google_drive_api::AboutExportFormats");
    }

    /**
     * Determine if the '<code>source</code>' attribute was set.
     *
     * @return true if the '<code>source</code>' attribute was set.
     */
    bool has_source() const {
      return Storage().isMember("source");
    }

    /**
     * Clears the '<code>source</code>' attribute.
     */
    void clear_source() {
      MutableStorage()->removeMember("source");
    }


    /**
     * Get the value of the '<code>source</code>' attribute.
     */
    const StringPiece get_source() const {
      const Json::Value& v = Storage("source");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>source</code>' attribute.
     *
     * The content type to convert from.
     *
     * @param[in] value The new value.
     */
    void set_source(const StringPiece& value) {
      *MutableStorage("source") = value.data();
    }

    /**
     * Determine if the '<code>targets</code>' attribute was set.
     *
     * @return true if the '<code>targets</code>' attribute was set.
     */
    bool has_targets() const {
      return Storage().isMember("targets");
    }

    /**
     * Clears the '<code>targets</code>' attribute.
     */
    void clear_targets() {
      MutableStorage()->removeMember("targets");
    }


    /**
     * Get a reference to the value of the '<code>targets</code>' attribute.
     */
    const client::JsonCppArray<string > get_targets() const {
       const Json::Value& storage = Storage("targets");
      return client::JsonValueToCppValueHelper<client::JsonCppArray<string > >(storage);
    }

    /**
     * Gets a reference to a mutable value of the '<code>targets</code>'
     * property.
     *
     * The possible content types to convert to.
     *
     * @return The result can be modified to change the attribute value.
     */
    client::JsonCppArray<string > mutable_targets() {
      Json::Value* storage = MutableStorage("targets");
      return client::JsonValueToMutableCppValueHelper<client::JsonCppArray<string > >(storage);
    }

   private:
    void operator=(const AboutExportFormats&);
  };  // AboutExportFormats
  /**
   * No description provided.
   *
   * @ingroup DataObject
   */
  class AboutFeatures : public client::JsonCppData {
   public:

    /**
     * Creates a new default instance.
     *
     * @return Ownership is passed back to the caller.
     */
    static AboutFeatures* New();

    /**
     * Standard constructor for an immutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit AboutFeatures(const Json::Value& storage);

    /**
     * Standard constructor for a mutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit AboutFeatures(Json::Value* storage);

    /**
     * Standard destructor.
     */
    virtual ~AboutFeatures();

    /**
     * Returns a string denoting the type of this data object.
     *
     * @return <code>google_drive_api::AboutFeatures</code>
     */
    const StringPiece GetTypeName() const {
      return StringPiece("google_drive_api::AboutFeatures");
    }

    /**
     * Determine if the '<code>featureName</code>' attribute was set.
     *
     * @return true if the '<code>featureName</code>' attribute was set.
     */
    bool has_feature_name() const {
      return Storage().isMember("featureName");
    }

    /**
     * Clears the '<code>featureName</code>' attribute.
     */
    void clear_feature_name() {
      MutableStorage()->removeMember("featureName");
    }


    /**
     * Get the value of the '<code>featureName</code>' attribute.
     */
    const StringPiece get_feature_name() const {
      const Json::Value& v = Storage("featureName");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>featureName</code>' attribute.
     *
     * The name of the feature.
     *
     * @param[in] value The new value.
     */
    void set_feature_name(const StringPiece& value) {
      *MutableStorage("featureName") = value.data();
    }

    /**
     * Determine if the '<code>featureRate</code>' attribute was set.
     *
     * @return true if the '<code>featureRate</code>' attribute was set.
     */
    bool has_feature_rate() const {
      return Storage().isMember("featureRate");
    }

    /**
     * Clears the '<code>featureRate</code>' attribute.
     */
    void clear_feature_rate() {
      MutableStorage()->removeMember("featureRate");
    }


    /**
     * Get the value of the '<code>featureRate</code>' attribute.
     */
    double get_feature_rate() const {
      const Json::Value& storage = Storage("featureRate");
      return client::JsonValueToCppValueHelper<double >(storage);
    }

    /**
     * Change the '<code>featureRate</code>' attribute.
     *
     * The request limit rate for this feature, in queries per second.
     *
     * @param[in] value The new value.
     */
    void set_feature_rate(double value) {
      client::SetJsonValueFromCppValueHelper<double >(
        value, MutableStorage("featureRate"));
    }

   private:
    void operator=(const AboutFeatures&);
  };  // AboutFeatures
  /**
   * No description provided.
   *
   * @ingroup DataObject
   */
  class AboutImportFormats : public client::JsonCppData {
   public:

    /**
     * Creates a new default instance.
     *
     * @return Ownership is passed back to the caller.
     */
    static AboutImportFormats* New();

    /**
     * Standard constructor for an immutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit AboutImportFormats(const Json::Value& storage);

    /**
     * Standard constructor for a mutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit AboutImportFormats(Json::Value* storage);

    /**
     * Standard destructor.
     */
    virtual ~AboutImportFormats();

    /**
     * Returns a string denoting the type of this data object.
     *
     * @return <code>google_drive_api::AboutImportFormats</code>
     */
    const StringPiece GetTypeName() const {
      return StringPiece("google_drive_api::AboutImportFormats");
    }

    /**
     * Determine if the '<code>source</code>' attribute was set.
     *
     * @return true if the '<code>source</code>' attribute was set.
     */
    bool has_source() const {
      return Storage().isMember("source");
    }

    /**
     * Clears the '<code>source</code>' attribute.
     */
    void clear_source() {
      MutableStorage()->removeMember("source");
    }


    /**
     * Get the value of the '<code>source</code>' attribute.
     */
    const StringPiece get_source() const {
      const Json::Value& v = Storage("source");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>source</code>' attribute.
     *
     * The imported file's content type to convert from.
     *
     * @param[in] value The new value.
     */
    void set_source(const StringPiece& value) {
      *MutableStorage("source") = value.data();
    }

    /**
     * Determine if the '<code>targets</code>' attribute was set.
     *
     * @return true if the '<code>targets</code>' attribute was set.
     */
    bool has_targets() const {
      return Storage().isMember("targets");
    }

    /**
     * Clears the '<code>targets</code>' attribute.
     */
    void clear_targets() {
      MutableStorage()->removeMember("targets");
    }


    /**
     * Get a reference to the value of the '<code>targets</code>' attribute.
     */
    const client::JsonCppArray<string > get_targets() const {
       const Json::Value& storage = Storage("targets");
      return client::JsonValueToCppValueHelper<client::JsonCppArray<string > >(storage);
    }

    /**
     * Gets a reference to a mutable value of the '<code>targets</code>'
     * property.
     *
     * The possible content types to convert to.
     *
     * @return The result can be modified to change the attribute value.
     */
    client::JsonCppArray<string > mutable_targets() {
      Json::Value* storage = MutableStorage("targets");
      return client::JsonValueToMutableCppValueHelper<client::JsonCppArray<string > >(storage);
    }

   private:
    void operator=(const AboutImportFormats&);
  };  // AboutImportFormats
  /**
   * No description provided.
   *
   * @ingroup DataObject
   */
  class AboutMaxUploadSizes : public client::JsonCppData {
   public:

    /**
     * Creates a new default instance.
     *
     * @return Ownership is passed back to the caller.
     */
    static AboutMaxUploadSizes* New();

    /**
     * Standard constructor for an immutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit AboutMaxUploadSizes(const Json::Value& storage);

    /**
     * Standard constructor for a mutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit AboutMaxUploadSizes(Json::Value* storage);

    /**
     * Standard destructor.
     */
    virtual ~AboutMaxUploadSizes();

    /**
     * Returns a string denoting the type of this data object.
     *
     * @return <code>google_drive_api::AboutMaxUploadSizes</code>
     */
    const StringPiece GetTypeName() const {
      return StringPiece("google_drive_api::AboutMaxUploadSizes");
    }

    /**
     * Determine if the '<code>size</code>' attribute was set.
     *
     * @return true if the '<code>size</code>' attribute was set.
     */
    bool has_size() const {
      return Storage().isMember("size");
    }

    /**
     * Clears the '<code>size</code>' attribute.
     */
    void clear_size() {
      MutableStorage()->removeMember("size");
    }


    /**
     * Get the value of the '<code>size</code>' attribute.
     */
    int64 get_size() const {
      const Json::Value& storage = Storage("size");
      return client::JsonValueToCppValueHelper<int64 >(storage);
    }

    /**
     * Change the '<code>size</code>' attribute.
     *
     * The max upload size for this type.
     *
     * @param[in] value The new value.
     */
    void set_size(int64 value) {
      client::SetJsonValueFromCppValueHelper<int64 >(
        value, MutableStorage("size"));
    }

    /**
     * Determine if the '<code>type</code>' attribute was set.
     *
     * @return true if the '<code>type</code>' attribute was set.
     */
    bool has_type() const {
      return Storage().isMember("type");
    }

    /**
     * Clears the '<code>type</code>' attribute.
     */
    void clear_type() {
      MutableStorage()->removeMember("type");
    }


    /**
     * Get the value of the '<code>type</code>' attribute.
     */
    const StringPiece get_type() const {
      const Json::Value& v = Storage("type");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>type</code>' attribute.
     *
     * The file type.
     *
     * @param[in] value The new value.
     */
    void set_type(const StringPiece& value) {
      *MutableStorage("type") = value.data();
    }

   private:
    void operator=(const AboutMaxUploadSizes&);
  };  // AboutMaxUploadSizes
  /**
   * No description provided.
   *
   * @ingroup DataObject
   */
  class AboutQuotaBytesByService : public client::JsonCppData {
   public:

    /**
     * Creates a new default instance.
     *
     * @return Ownership is passed back to the caller.
     */
    static AboutQuotaBytesByService* New();

    /**
     * Standard constructor for an immutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit AboutQuotaBytesByService(const Json::Value& storage);

    /**
     * Standard constructor for a mutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit AboutQuotaBytesByService(Json::Value* storage);

    /**
     * Standard destructor.
     */
    virtual ~AboutQuotaBytesByService();

    /**
     * Returns a string denoting the type of this data object.
     *
     * @return <code>google_drive_api::AboutQuotaBytesByService</code>
     */
    const StringPiece GetTypeName() const {
      return StringPiece("google_drive_api::AboutQuotaBytesByService");
    }

    /**
     * Determine if the '<code>bytesUsed</code>' attribute was set.
     *
     * @return true if the '<code>bytesUsed</code>' attribute was set.
     */
    bool has_bytes_used() const {
      return Storage().isMember("bytesUsed");
    }

    /**
     * Clears the '<code>bytesUsed</code>' attribute.
     */
    void clear_bytes_used() {
      MutableStorage()->removeMember("bytesUsed");
    }


    /**
     * Get the value of the '<code>bytesUsed</code>' attribute.
     */
    int64 get_bytes_used() const {
      const Json::Value& storage = Storage("bytesUsed");
      return client::JsonValueToCppValueHelper<int64 >(storage);
    }

    /**
     * Change the '<code>bytesUsed</code>' attribute.
     *
     * The storage quota bytes used by the service.
     *
     * @param[in] value The new value.
     */
    void set_bytes_used(int64 value) {
      client::SetJsonValueFromCppValueHelper<int64 >(
        value, MutableStorage("bytesUsed"));
    }

    /**
     * Determine if the '<code>serviceName</code>' attribute was set.
     *
     * @return true if the '<code>serviceName</code>' attribute was set.
     */
    bool has_service_name() const {
      return Storage().isMember("serviceName");
    }

    /**
     * Clears the '<code>serviceName</code>' attribute.
     */
    void clear_service_name() {
      MutableStorage()->removeMember("serviceName");
    }


    /**
     * Get the value of the '<code>serviceName</code>' attribute.
     */
    const StringPiece get_service_name() const {
      const Json::Value& v = Storage("serviceName");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>serviceName</code>' attribute.
     *
     * The service's name, e.g. DRIVE, GMAIL, or PHOTOS.
     *
     * @param[in] value The new value.
     */
    void set_service_name(const StringPiece& value) {
      *MutableStorage("serviceName") = value.data();
    }

   private:
    void operator=(const AboutQuotaBytesByService&);
  };  // AboutQuotaBytesByService
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static About* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit About(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit About(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~About();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_drive_api::About</code>
   */
  const StringPiece GetTypeName() const {
    return StringPiece("google_drive_api::About");
  }

  /**
   * Determine if the '<code>additionalRoleInfo</code>' attribute was set.
   *
   * @return true if the '<code>additionalRoleInfo</code>' attribute was set.
   */
  bool has_additional_role_info() const {
    return Storage().isMember("additionalRoleInfo");
  }

  /**
   * Clears the '<code>additionalRoleInfo</code>' attribute.
   */
  void clear_additional_role_info() {
    MutableStorage()->removeMember("additionalRoleInfo");
  }


  /**
   * Get a reference to the value of the '<code>additionalRoleInfo</code>'
   * attribute.
   */
  const client::JsonCppArray<AboutAdditionalRoleInfo > get_additional_role_info() const {
     const Json::Value& storage = Storage("additionalRoleInfo");
    return client::JsonValueToCppValueHelper<client::JsonCppArray<AboutAdditionalRoleInfo > >(storage);
  }

  /**
   * Gets a reference to a mutable value of the
   * '<code>additionalRoleInfo</code>' property.
   *
   * Information about supported additional roles per file type. The most
   * specific type takes precedence.
   *
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppArray<AboutAdditionalRoleInfo > mutable_additionalRoleInfo() {
    Json::Value* storage = MutableStorage("additionalRoleInfo");
    return client::JsonValueToMutableCppValueHelper<client::JsonCppArray<AboutAdditionalRoleInfo > >(storage);
  }

  /**
   * Determine if the '<code>domainSharingPolicy</code>' attribute was set.
   *
   * @return true if the '<code>domainSharingPolicy</code>' attribute was set.
   */
  bool has_domain_sharing_policy() const {
    return Storage().isMember("domainSharingPolicy");
  }

  /**
   * Clears the '<code>domainSharingPolicy</code>' attribute.
   */
  void clear_domain_sharing_policy() {
    MutableStorage()->removeMember("domainSharingPolicy");
  }


  /**
   * Get the value of the '<code>domainSharingPolicy</code>' attribute.
   */
  const StringPiece get_domain_sharing_policy() const {
    const Json::Value& v = Storage("domainSharingPolicy");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>domainSharingPolicy</code>' attribute.
   *
   * The domain sharing policy for the current user.
   *
   * @param[in] value The new value.
   */
  void set_domain_sharing_policy(const StringPiece& value) {
    *MutableStorage("domainSharingPolicy") = value.data();
  }

  /**
   * Determine if the '<code>etag</code>' attribute was set.
   *
   * @return true if the '<code>etag</code>' attribute was set.
   */
  bool has_etag() const {
    return Storage().isMember("etag");
  }

  /**
   * Clears the '<code>etag</code>' attribute.
   */
  void clear_etag() {
    MutableStorage()->removeMember("etag");
  }


  /**
   * Get the value of the '<code>etag</code>' attribute.
   */
  const StringPiece get_etag() const {
    const Json::Value& v = Storage("etag");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>etag</code>' attribute.
   *
   * The ETag of the item.
   *
   * @param[in] value The new value.
   */
  void set_etag(const StringPiece& value) {
    *MutableStorage("etag") = value.data();
  }

  /**
   * Determine if the '<code>exportFormats</code>' attribute was set.
   *
   * @return true if the '<code>exportFormats</code>' attribute was set.
   */
  bool has_export_formats() const {
    return Storage().isMember("exportFormats");
  }

  /**
   * Clears the '<code>exportFormats</code>' attribute.
   */
  void clear_export_formats() {
    MutableStorage()->removeMember("exportFormats");
  }


  /**
   * Get a reference to the value of the '<code>exportFormats</code>' attribute.
   */
  const client::JsonCppArray<AboutExportFormats > get_export_formats() const {
     const Json::Value& storage = Storage("exportFormats");
    return client::JsonValueToCppValueHelper<client::JsonCppArray<AboutExportFormats > >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>exportFormats</code>'
   * property.
   *
   * The allowable export formats.
   *
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppArray<AboutExportFormats > mutable_exportFormats() {
    Json::Value* storage = MutableStorage("exportFormats");
    return client::JsonValueToMutableCppValueHelper<client::JsonCppArray<AboutExportFormats > >(storage);
  }

  /**
   * Determine if the '<code>features</code>' attribute was set.
   *
   * @return true if the '<code>features</code>' attribute was set.
   */
  bool has_features() const {
    return Storage().isMember("features");
  }

  /**
   * Clears the '<code>features</code>' attribute.
   */
  void clear_features() {
    MutableStorage()->removeMember("features");
  }


  /**
   * Get a reference to the value of the '<code>features</code>' attribute.
   */
  const client::JsonCppArray<AboutFeatures > get_features() const {
     const Json::Value& storage = Storage("features");
    return client::JsonValueToCppValueHelper<client::JsonCppArray<AboutFeatures > >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>features</code>'
   * property.
   *
   * List of additional features enabled on this account.
   *
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppArray<AboutFeatures > mutable_features() {
    Json::Value* storage = MutableStorage("features");
    return client::JsonValueToMutableCppValueHelper<client::JsonCppArray<AboutFeatures > >(storage);
  }

  /**
   * Determine if the '<code>importFormats</code>' attribute was set.
   *
   * @return true if the '<code>importFormats</code>' attribute was set.
   */
  bool has_import_formats() const {
    return Storage().isMember("importFormats");
  }

  /**
   * Clears the '<code>importFormats</code>' attribute.
   */
  void clear_import_formats() {
    MutableStorage()->removeMember("importFormats");
  }


  /**
   * Get a reference to the value of the '<code>importFormats</code>' attribute.
   */
  const client::JsonCppArray<AboutImportFormats > get_import_formats() const {
     const Json::Value& storage = Storage("importFormats");
    return client::JsonValueToCppValueHelper<client::JsonCppArray<AboutImportFormats > >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>importFormats</code>'
   * property.
   *
   * The allowable import formats.
   *
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppArray<AboutImportFormats > mutable_importFormats() {
    Json::Value* storage = MutableStorage("importFormats");
    return client::JsonValueToMutableCppValueHelper<client::JsonCppArray<AboutImportFormats > >(storage);
  }

  /**
   * Determine if the '<code>isCurrentAppInstalled</code>' attribute was set.
   *
   * @return true if the '<code>isCurrentAppInstalled</code>' attribute was set.
   */
  bool has_is_current_app_installed() const {
    return Storage().isMember("isCurrentAppInstalled");
  }

  /**
   * Clears the '<code>isCurrentAppInstalled</code>' attribute.
   */
  void clear_is_current_app_installed() {
    MutableStorage()->removeMember("isCurrentAppInstalled");
  }


  /**
   * Get the value of the '<code>isCurrentAppInstalled</code>' attribute.
   */
  bool get_is_current_app_installed() const {
    const Json::Value& storage = Storage("isCurrentAppInstalled");
    return client::JsonValueToCppValueHelper<bool >(storage);
  }

  /**
   * Change the '<code>isCurrentAppInstalled</code>' attribute.
   *
   * A boolean indicating whether the authenticated app is installed by the
   * authenticated user.
   *
   * @param[in] value The new value.
   */
  void set_is_current_app_installed(bool value) {
    client::SetJsonValueFromCppValueHelper<bool >(
      value, MutableStorage("isCurrentAppInstalled"));
  }

  /**
   * Determine if the '<code>kind</code>' attribute was set.
   *
   * @return true if the '<code>kind</code>' attribute was set.
   */
  bool has_kind() const {
    return Storage().isMember("kind");
  }

  /**
   * Clears the '<code>kind</code>' attribute.
   */
  void clear_kind() {
    MutableStorage()->removeMember("kind");
  }


  /**
   * Get the value of the '<code>kind</code>' attribute.
   */
  const StringPiece get_kind() const {
    const Json::Value& v = Storage("kind");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>kind</code>' attribute.
   *
   * This is always drive#about.
   *
   * @param[in] value The new value.
   */
  void set_kind(const StringPiece& value) {
    *MutableStorage("kind") = value.data();
  }

  /**
   * Determine if the '<code>languageCode</code>' attribute was set.
   *
   * @return true if the '<code>languageCode</code>' attribute was set.
   */
  bool has_language_code() const {
    return Storage().isMember("languageCode");
  }

  /**
   * Clears the '<code>languageCode</code>' attribute.
   */
  void clear_language_code() {
    MutableStorage()->removeMember("languageCode");
  }


  /**
   * Get the value of the '<code>languageCode</code>' attribute.
   */
  const StringPiece get_language_code() const {
    const Json::Value& v = Storage("languageCode");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>languageCode</code>' attribute.
   *
   * The user's language or locale code, as defined by BCP 47, with some
   * extensions from Unicode's LDML format
   * (http://www.unicode.org/reports/tr35/).
   *
   * @param[in] value The new value.
   */
  void set_language_code(const StringPiece& value) {
    *MutableStorage("languageCode") = value.data();
  }

  /**
   * Determine if the '<code>largestChangeId</code>' attribute was set.
   *
   * @return true if the '<code>largestChangeId</code>' attribute was set.
   */
  bool has_largest_change_id() const {
    return Storage().isMember("largestChangeId");
  }

  /**
   * Clears the '<code>largestChangeId</code>' attribute.
   */
  void clear_largest_change_id() {
    MutableStorage()->removeMember("largestChangeId");
  }


  /**
   * Get the value of the '<code>largestChangeId</code>' attribute.
   */
  int64 get_largest_change_id() const {
    const Json::Value& storage = Storage("largestChangeId");
    return client::JsonValueToCppValueHelper<int64 >(storage);
  }

  /**
   * Change the '<code>largestChangeId</code>' attribute.
   *
   * The largest change id.
   *
   * @param[in] value The new value.
   */
  void set_largest_change_id(int64 value) {
    client::SetJsonValueFromCppValueHelper<int64 >(
      value, MutableStorage("largestChangeId"));
  }

  /**
   * Determine if the '<code>maxUploadSizes</code>' attribute was set.
   *
   * @return true if the '<code>maxUploadSizes</code>' attribute was set.
   */
  bool has_max_upload_sizes() const {
    return Storage().isMember("maxUploadSizes");
  }

  /**
   * Clears the '<code>maxUploadSizes</code>' attribute.
   */
  void clear_max_upload_sizes() {
    MutableStorage()->removeMember("maxUploadSizes");
  }


  /**
   * Get a reference to the value of the '<code>maxUploadSizes</code>'
   * attribute.
   */
  const client::JsonCppArray<AboutMaxUploadSizes > get_max_upload_sizes() const {
     const Json::Value& storage = Storage("maxUploadSizes");
    return client::JsonValueToCppValueHelper<client::JsonCppArray<AboutMaxUploadSizes > >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>maxUploadSizes</code>'
   * property.
   *
   * List of max upload sizes for each file type. The most specific type takes
   * precedence.
   *
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppArray<AboutMaxUploadSizes > mutable_maxUploadSizes() {
    Json::Value* storage = MutableStorage("maxUploadSizes");
    return client::JsonValueToMutableCppValueHelper<client::JsonCppArray<AboutMaxUploadSizes > >(storage);
  }

  /**
   * Determine if the '<code>name</code>' attribute was set.
   *
   * @return true if the '<code>name</code>' attribute was set.
   */
  bool has_name() const {
    return Storage().isMember("name");
  }

  /**
   * Clears the '<code>name</code>' attribute.
   */
  void clear_name() {
    MutableStorage()->removeMember("name");
  }


  /**
   * Get the value of the '<code>name</code>' attribute.
   */
  const StringPiece get_name() const {
    const Json::Value& v = Storage("name");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>name</code>' attribute.
   *
   * The name of the current user.
   *
   * @param[in] value The new value.
   */
  void set_name(const StringPiece& value) {
    *MutableStorage("name") = value.data();
  }

  /**
   * Determine if the '<code>permissionId</code>' attribute was set.
   *
   * @return true if the '<code>permissionId</code>' attribute was set.
   */
  bool has_permission_id() const {
    return Storage().isMember("permissionId");
  }

  /**
   * Clears the '<code>permissionId</code>' attribute.
   */
  void clear_permission_id() {
    MutableStorage()->removeMember("permissionId");
  }


  /**
   * Get the value of the '<code>permissionId</code>' attribute.
   */
  const StringPiece get_permission_id() const {
    const Json::Value& v = Storage("permissionId");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>permissionId</code>' attribute.
   *
   * The current user's ID as visible in the permissions collection.
   *
   * @param[in] value The new value.
   */
  void set_permission_id(const StringPiece& value) {
    *MutableStorage("permissionId") = value.data();
  }

  /**
   * Determine if the '<code>quotaBytesByService</code>' attribute was set.
   *
   * @return true if the '<code>quotaBytesByService</code>' attribute was set.
   */
  bool has_quota_bytes_by_service() const {
    return Storage().isMember("quotaBytesByService");
  }

  /**
   * Clears the '<code>quotaBytesByService</code>' attribute.
   */
  void clear_quota_bytes_by_service() {
    MutableStorage()->removeMember("quotaBytesByService");
  }


  /**
   * Get a reference to the value of the '<code>quotaBytesByService</code>'
   * attribute.
   */
  const client::JsonCppArray<AboutQuotaBytesByService > get_quota_bytes_by_service() const {
     const Json::Value& storage = Storage("quotaBytesByService");
    return client::JsonValueToCppValueHelper<client::JsonCppArray<AboutQuotaBytesByService > >(storage);
  }

  /**
   * Gets a reference to a mutable value of the
   * '<code>quotaBytesByService</code>' property.
   *
   * The amount of storage quota used by different Google services.
   *
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppArray<AboutQuotaBytesByService > mutable_quotaBytesByService() {
    Json::Value* storage = MutableStorage("quotaBytesByService");
    return client::JsonValueToMutableCppValueHelper<client::JsonCppArray<AboutQuotaBytesByService > >(storage);
  }

  /**
   * Determine if the '<code>quotaBytesTotal</code>' attribute was set.
   *
   * @return true if the '<code>quotaBytesTotal</code>' attribute was set.
   */
  bool has_quota_bytes_total() const {
    return Storage().isMember("quotaBytesTotal");
  }

  /**
   * Clears the '<code>quotaBytesTotal</code>' attribute.
   */
  void clear_quota_bytes_total() {
    MutableStorage()->removeMember("quotaBytesTotal");
  }


  /**
   * Get the value of the '<code>quotaBytesTotal</code>' attribute.
   */
  int64 get_quota_bytes_total() const {
    const Json::Value& storage = Storage("quotaBytesTotal");
    return client::JsonValueToCppValueHelper<int64 >(storage);
  }

  /**
   * Change the '<code>quotaBytesTotal</code>' attribute.
   *
   * The total number of quota bytes.
   *
   * @param[in] value The new value.
   */
  void set_quota_bytes_total(int64 value) {
    client::SetJsonValueFromCppValueHelper<int64 >(
      value, MutableStorage("quotaBytesTotal"));
  }

  /**
   * Determine if the '<code>quotaBytesUsed</code>' attribute was set.
   *
   * @return true if the '<code>quotaBytesUsed</code>' attribute was set.
   */
  bool has_quota_bytes_used() const {
    return Storage().isMember("quotaBytesUsed");
  }

  /**
   * Clears the '<code>quotaBytesUsed</code>' attribute.
   */
  void clear_quota_bytes_used() {
    MutableStorage()->removeMember("quotaBytesUsed");
  }


  /**
   * Get the value of the '<code>quotaBytesUsed</code>' attribute.
   */
  int64 get_quota_bytes_used() const {
    const Json::Value& storage = Storage("quotaBytesUsed");
    return client::JsonValueToCppValueHelper<int64 >(storage);
  }

  /**
   * Change the '<code>quotaBytesUsed</code>' attribute.
   *
   * The number of quota bytes used by Google Drive.
   *
   * @param[in] value The new value.
   */
  void set_quota_bytes_used(int64 value) {
    client::SetJsonValueFromCppValueHelper<int64 >(
      value, MutableStorage("quotaBytesUsed"));
  }

  /**
   * Determine if the '<code>quotaBytesUsedAggregate</code>' attribute was set.
   *
   * @return true if the '<code>quotaBytesUsedAggregate</code>' attribute was
   * set.
   */
  bool has_quota_bytes_used_aggregate() const {
    return Storage().isMember("quotaBytesUsedAggregate");
  }

  /**
   * Clears the '<code>quotaBytesUsedAggregate</code>' attribute.
   */
  void clear_quota_bytes_used_aggregate() {
    MutableStorage()->removeMember("quotaBytesUsedAggregate");
  }


  /**
   * Get the value of the '<code>quotaBytesUsedAggregate</code>' attribute.
   */
  int64 get_quota_bytes_used_aggregate() const {
    const Json::Value& storage = Storage("quotaBytesUsedAggregate");
    return client::JsonValueToCppValueHelper<int64 >(storage);
  }

  /**
   * Change the '<code>quotaBytesUsedAggregate</code>' attribute.
   *
   * The number of quota bytes used by all Google apps (Drive, Picasa, etc.).
   *
   * @param[in] value The new value.
   */
  void set_quota_bytes_used_aggregate(int64 value) {
    client::SetJsonValueFromCppValueHelper<int64 >(
      value, MutableStorage("quotaBytesUsedAggregate"));
  }

  /**
   * Determine if the '<code>quotaBytesUsedInTrash</code>' attribute was set.
   *
   * @return true if the '<code>quotaBytesUsedInTrash</code>' attribute was set.
   */
  bool has_quota_bytes_used_in_trash() const {
    return Storage().isMember("quotaBytesUsedInTrash");
  }

  /**
   * Clears the '<code>quotaBytesUsedInTrash</code>' attribute.
   */
  void clear_quota_bytes_used_in_trash() {
    MutableStorage()->removeMember("quotaBytesUsedInTrash");
  }


  /**
   * Get the value of the '<code>quotaBytesUsedInTrash</code>' attribute.
   */
  int64 get_quota_bytes_used_in_trash() const {
    const Json::Value& storage = Storage("quotaBytesUsedInTrash");
    return client::JsonValueToCppValueHelper<int64 >(storage);
  }

  /**
   * Change the '<code>quotaBytesUsedInTrash</code>' attribute.
   *
   * The number of quota bytes used by trashed items.
   *
   * @param[in] value The new value.
   */
  void set_quota_bytes_used_in_trash(int64 value) {
    client::SetJsonValueFromCppValueHelper<int64 >(
      value, MutableStorage("quotaBytesUsedInTrash"));
  }

  /**
   * Determine if the '<code>quotaType</code>' attribute was set.
   *
   * @return true if the '<code>quotaType</code>' attribute was set.
   */
  bool has_quota_type() const {
    return Storage().isMember("quotaType");
  }

  /**
   * Clears the '<code>quotaType</code>' attribute.
   */
  void clear_quota_type() {
    MutableStorage()->removeMember("quotaType");
  }


  /**
   * Get the value of the '<code>quotaType</code>' attribute.
   */
  const StringPiece get_quota_type() const {
    const Json::Value& v = Storage("quotaType");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>quotaType</code>' attribute.
   *
   * The type of the user's storage quota. Possible values are:
   * - LIMITED
   * - UNLIMITED.
   *
   * @param[in] value The new value.
   */
  void set_quota_type(const StringPiece& value) {
    *MutableStorage("quotaType") = value.data();
  }

  /**
   * Determine if the '<code>remainingChangeIds</code>' attribute was set.
   *
   * @return true if the '<code>remainingChangeIds</code>' attribute was set.
   */
  bool has_remaining_change_ids() const {
    return Storage().isMember("remainingChangeIds");
  }

  /**
   * Clears the '<code>remainingChangeIds</code>' attribute.
   */
  void clear_remaining_change_ids() {
    MutableStorage()->removeMember("remainingChangeIds");
  }


  /**
   * Get the value of the '<code>remainingChangeIds</code>' attribute.
   */
  int64 get_remaining_change_ids() const {
    const Json::Value& storage = Storage("remainingChangeIds");
    return client::JsonValueToCppValueHelper<int64 >(storage);
  }

  /**
   * Change the '<code>remainingChangeIds</code>' attribute.
   *
   * The number of remaining change ids.
   *
   * @param[in] value The new value.
   */
  void set_remaining_change_ids(int64 value) {
    client::SetJsonValueFromCppValueHelper<int64 >(
      value, MutableStorage("remainingChangeIds"));
  }

  /**
   * Determine if the '<code>rootFolderId</code>' attribute was set.
   *
   * @return true if the '<code>rootFolderId</code>' attribute was set.
   */
  bool has_root_folder_id() const {
    return Storage().isMember("rootFolderId");
  }

  /**
   * Clears the '<code>rootFolderId</code>' attribute.
   */
  void clear_root_folder_id() {
    MutableStorage()->removeMember("rootFolderId");
  }


  /**
   * Get the value of the '<code>rootFolderId</code>' attribute.
   */
  const StringPiece get_root_folder_id() const {
    const Json::Value& v = Storage("rootFolderId");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>rootFolderId</code>' attribute.
   *
   * The id of the root folder.
   *
   * @param[in] value The new value.
   */
  void set_root_folder_id(const StringPiece& value) {
    *MutableStorage("rootFolderId") = value.data();
  }

  /**
   * Determine if the '<code>selfLink</code>' attribute was set.
   *
   * @return true if the '<code>selfLink</code>' attribute was set.
   */
  bool has_self_link() const {
    return Storage().isMember("selfLink");
  }

  /**
   * Clears the '<code>selfLink</code>' attribute.
   */
  void clear_self_link() {
    MutableStorage()->removeMember("selfLink");
  }


  /**
   * Get the value of the '<code>selfLink</code>' attribute.
   */
  const StringPiece get_self_link() const {
    const Json::Value& v = Storage("selfLink");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>selfLink</code>' attribute.
   *
   * A link back to this item.
   *
   * @param[in] value The new value.
   */
  void set_self_link(const StringPiece& value) {
    *MutableStorage("selfLink") = value.data();
  }

  /**
   * Determine if the '<code>user</code>' attribute was set.
   *
   * @return true if the '<code>user</code>' attribute was set.
   */
  bool has_user() const {
    return Storage().isMember("user");
  }

  /**
   * Clears the '<code>user</code>' attribute.
   */
  void clear_user() {
    MutableStorage()->removeMember("user");
  }


  /**
   * Get a reference to the value of the '<code>user</code>' attribute.
   */
  const User get_user() const {
     const Json::Value& storage = Storage("user");
    return client::JsonValueToCppValueHelper<User >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>user</code>' property.
   *
   * The authenticated user.
   *
   * @return The result can be modified to change the attribute value.
   */
  User mutable_user() {
    Json::Value* storage = MutableStorage("user");
    return client::JsonValueToMutableCppValueHelper<User >(storage);
  }

 private:
  void operator=(const About&);
};  // About
}  // namespace google_drive_api
#endif  // GOOGLE_DRIVE_API_ABOUT_H_
