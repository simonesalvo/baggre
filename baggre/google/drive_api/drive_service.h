// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.
//
//------------------------------------------------------------------------------
// This code was generated by google-apis-code-generator 1.5.0
//   Build date: 2014-10-28 17:08:27 UTC
//   on: 2014-10-30, 17:11:04 UTC
//   C++ generator version:
//
//  Changes to this file may cause incorrect behavior and will be lost if
//  the code is regenerated.
//------------------------------------------------------------------------------
#ifndef  GOOGLE_DRIVE_API_DRIVE_SERVICE_H_
#define  GOOGLE_DRIVE_API_DRIVE_SERVICE_H_

#include <string>
#include "googleapis/base/integral_types.h"
#include "googleapis/base/macros.h"
#include "googleapis/base/scoped_ptr.h"
#include "googleapis/client/service/client_service.h"
#include "googleapis/client/service/media_uploader.h"
#include "googleapis/client/service/service_request_pager.h"
#include "googleapis/client/util/status.h"
#include "googleapis/client/util/uri_template.h"

#include "google/drive_api/about.h"
#include "google/drive_api/app.h"
#include "google/drive_api/app_list.h"
#include "google/drive_api/change.h"
#include "google/drive_api/change_list.h"
#include "google/drive_api/channel.h"
#include "google/drive_api/child_list.h"
#include "google/drive_api/child_reference.h"
#include "google/drive_api/comment.h"
#include "google/drive_api/comment_list.h"
#include "google/drive_api/comment_reply.h"
#include "google/drive_api/comment_reply_list.h"
#include "google/drive_api/file.h"
#include "google/drive_api/file_list.h"
#include "google/drive_api/parent_list.h"
#include "google/drive_api/parent_reference.h"
#include "google/drive_api/permission.h"
#include "google/drive_api/permission_id.h"
#include "google/drive_api/permission_list.h"
#include "google/drive_api/property.h"
#include "google/drive_api/property_list.h"
#include "google/drive_api/revision.h"
#include "google/drive_api/revision_list.h"


namespace google_drive_api {
using namespace googleapis;
/**
 * \mainpage
 *   Drive API Version v2
 *
 * \section ApiInfo API Version Information
 *    <table>
 *      <tr><th>API
 *          <td><a href='https://developers.google.com/drive/'>Drive API</a>
 *      <tr><th>API Version<td>v2
 *      <tr><th>API Rev<td>151
 *      <tr><th>API Docs
 *          <td><a href='https://developers.google.com/drive/'>
 *              https://developers.google.com/drive/</a>
 *      <tr><th>Discovery Name<td>drive
 *      <tr><th>Generated At<td>2014-10-30 17:11:04 UTC
 *      <tr><th>C++ Generator<td>google-apis-code-generator
 *      <tr><th>Generator Version
 *          <td>1.5.0 / c++=0.1.2
 *      <tr><th>Generator Build<td>2014-10-28 17:08:27 UTC
 *    </table>
 *
 * \section ForMoreInfo For More Information
 *
 * The complete API documentation for using Drive API can be found at
 * <a href='https://developers.google.com/drive/'>https://developers.google.com/drive/</a>.
 *
 * For more information about the Google APIs Client Library for C++, see
 * <a href='https://developers.google.com/api-client-library/cpp/start/get_started'>
 * https://developers.google.com/api-client-library/cpp/start/get_started</a>
 */
class DriveService;

/**
 * Implements a common base method for all methods within the DriveService.
 *
 * This class defines all the attributes common across all methods.
 * It does not pertain to any specific service API so is not normally
 * explicitly instantiated.
 */
class DriveServiceBaseRequest
      : public client::ClientServiceRequest {
 public:
  /**
   * Standard constructor.
   *
   * @param[in] service  The service instance to send to when executed.
   *        In practice this will be supplied internally by the service
   *        when it acts as a method factory.
   *
   * @param[in] credential  If not NULL then the credential to authorize with.
   *        In practice this is supplied by the user code that is creating
   *        the method instance.
   *
   * @param[in] method  The HTTP method to use for the underlying HTTP request.
   *        In practice this is specified by the particular API endpoint and
   *        supplied internally by the derived class for that endpoint.
   *
   * @param[in] uri_template  The <a href='http://tools.ietf.org/html/rfc6570'>
   *        RFC 6570 URI Template</a> specifying the url to invoke
   *        The parameters in the template should be resolvable attributes.
   *        In practice this parameter is supplied internally by the derived
   *        class for the endpoint.
   */
  DriveServiceBaseRequest(
      const client::ClientService* service,
      client::AuthorizationCredential* credential,
      client::HttpRequest::HttpMethod method,
      const StringPiece& uri_template);

  /**
   * Standard destructor.
   */
  virtual ~DriveServiceBaseRequest();


  /**
   * Clears the '<code>alt</code>' attribute so it is no longer set.
   */
  void clear_alt() {
    _have_alt_ = false;
    client::ClearCppValueHelper(&alt_);
  }


  /**
   * Gets the optional '<code>alt</code>' attribute.
   *
   * If the value is not set then the default value will be returned.
   */
  const string& get_alt() const { return alt_; }

  /**
   * Gets a modifiable pointer to the optional <code>alt</code>' attribute.
   *
   * @return  The value can be set by dereferencing the pointer.
   */
  string* mutable_alt() {
    _have_alt_ = true;
    return &alt_;
  }


  /**
   * Sets the '<code>alt</code>' attribute.
   *
   * @param[in] value Data format for the response.
   */
  void set_alt(const string& value) {
    _have_alt_ = true;
    alt_ = value;
  }



  /**
   * Clears the '<code>fields</code>' attribute so it is no longer set.
   */
  void clear_fields() {
    _have_fields_ = false;
    client::ClearCppValueHelper(&fields_);
  }


  /**
   * Gets the optional '<code>fields</code>' attribute.
   *
   * If the value is not set then the default value will be returned.
   */
  const string& get_fields() const { return fields_; }

  /**
   * Gets a modifiable pointer to the optional <code>fields</code>' attribute.
   *
   * @return  The value can be set by dereferencing the pointer.
   */
  string* mutable_fields() {
    _have_fields_ = true;
    return &fields_;
  }


  /**
   * Sets the '<code>fields</code>' attribute.
   *
   * @param[in] value Selector specifying which fields to include in a partial
   * response.
   */
  void set_fields(const string& value) {
    _have_fields_ = true;
    fields_ = value;
  }



  /**
   * Clears the '<code>key</code>' attribute so it is no longer set.
   */
  void clear_key() {
    _have_key_ = false;
    client::ClearCppValueHelper(&key_);
  }


  /**
   * Gets the optional '<code>key</code>' attribute.
   *
   * If the value is not set then the default value will be returned.
   */
  const string& get_key() const { return key_; }

  /**
   * Gets a modifiable pointer to the optional <code>key</code>' attribute.
   *
   * @return  The value can be set by dereferencing the pointer.
   */
  string* mutable_key() {
    _have_key_ = true;
    return &key_;
  }


  /**
   * Sets the '<code>key</code>' attribute.
   *
   * @param[in] value API key. Your API key identifies your project and provides
   * you with API access, quota, and reports. Required unless you provide an
   * OAuth 2.0 token.
   */
  void set_key(const string& value) {
    _have_key_ = true;
    key_ = value;
  }



  /**
   * Clears the '<code>oauth_token</code>' attribute so it is no longer set.
   */
  void clear_oauth_token() {
    _have_oauth_token_ = false;
    client::ClearCppValueHelper(&oauth_token_);
  }
  /**
   * @deprecated
   * @see clear_oauth_token
   */
  void clear_oauthToken() {
    clear_oauth_token();
  }

  /**
   * Gets the optional '<code>oauth_token</code>' attribute.
   *
   * If the value is not set then the default value will be returned.
   */
  const string& get_oauth_token() const { return oauth_token_; }

  /**
   * Gets a modifiable pointer to the optional <code>oauth_token</code>'
   * attribute.
   *
   * @return  The value can be set by dereferencing the pointer.
   */
  string* mutable_oauthToken() {
    _have_oauth_token_ = true;
    return &oauth_token_;
  }


  /**
   * Sets the '<code>oauth_token</code>' attribute.
   *
   * @param[in] value OAuth 2.0 token for the current user.
   */
  void set_oauth_token(const string& value) {
    _have_oauth_token_ = true;
    oauth_token_ = value;
  }



  /**
   * Clears the '<code>prettyPrint</code>' attribute so it is no longer set.
   */
  void clear_pretty_print() {
    _have_pretty_print_ = false;
    client::ClearCppValueHelper(&pretty_print_);
  }
  /**
   * @deprecated
   * @see clear_pretty_print
   */
  void clear_prettyPrint() {
    clear_pretty_print();
  }

  /**
   * Gets the optional '<code>prettyPrint</code>' attribute.
   *
   * If the value is not set then the default value will be returned.
   */
  bool get_pretty_print() const { return pretty_print_; }

  /**
   * Sets the '<code>prettyPrint</code>' attribute.
   *
   * @param[in] value Returns response with indentations and line breaks.
   */
  void set_pretty_print(bool value) {
    _have_pretty_print_ = true;
    pretty_print_ = value;
  }

  /**
   * Clears the '<code>quotaUser</code>' attribute so it is no longer set.
   */
  void clear_quota_user() {
    _have_quota_user_ = false;
    client::ClearCppValueHelper(&quota_user_);
  }
  /**
   * @deprecated
   * @see clear_quota_user
   */
  void clear_quotaUser() {
    clear_quota_user();
  }

  /**
   * Gets the optional '<code>quotaUser</code>' attribute.
   *
   * If the value is not set then the default value will be returned.
   */
  const string& get_quota_user() const { return quota_user_; }

  /**
   * Gets a modifiable pointer to the optional <code>quotaUser</code>'
   * attribute.
   *
   * @return  The value can be set by dereferencing the pointer.
   */
  string* mutable_quotaUser() {
    _have_quota_user_ = true;
    return &quota_user_;
  }


  /**
   * Sets the '<code>quotaUser</code>' attribute.
   *
   * @param[in] value Available to use for quota purposes for server-side
   * applications. Can be any arbitrary string assigned to a user, but should
   * not exceed 40 characters. Overrides userIp if both are provided.
   */
  void set_quota_user(const string& value) {
    _have_quota_user_ = true;
    quota_user_ = value;
  }



  /**
   * Clears the '<code>userIp</code>' attribute so it is no longer set.
   */
  void clear_user_ip() {
    _have_user_ip_ = false;
    client::ClearCppValueHelper(&user_ip_);
  }
  /**
   * @deprecated
   * @see clear_user_ip
   */
  void clear_userIp() {
    clear_user_ip();
  }

  /**
   * Gets the optional '<code>userIp</code>' attribute.
   *
   * If the value is not set then the default value will be returned.
   */
  const string& get_user_ip() const { return user_ip_; }

  /**
   * Gets a modifiable pointer to the optional <code>userIp</code>' attribute.
   *
   * @return  The value can be set by dereferencing the pointer.
   */
  string* mutable_userIp() {
    _have_user_ip_ = true;
    return &user_ip_;
  }


  /**
   * Sets the '<code>userIp</code>' attribute.
   *
   * @param[in] value IP address of the site where the request originates. Use
   * this if you want to enforce per-user limits.
   */
  void set_user_ip(const string& value) {
    _have_user_ip_ = true;
    user_ip_ = value;
  }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the
   * URI supplied to the constructor.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
      const StringPiece& variable_name,
      const client::UriTemplateConfig& config,
      string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);

 private:
  string alt_;
  string fields_;
  string key_;
  string oauth_token_;
  bool pretty_print_;
  string quota_user_;
  string user_ip_;
  bool _have_alt_ : 1;
  bool _have_fields_ : 1;
  bool _have_key_ : 1;
  bool _have_oauth_token_ : 1;
  bool _have_pretty_print_ : 1;
  bool _have_quota_user_ : 1;
  bool _have_user_ip_ : 1;

  DISALLOW_COPY_AND_ASSIGN(DriveServiceBaseRequest);
};



/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.appdata
 * https://www.googleapis.com/auth/drive.file
 * https://www.googleapis.com/auth/drive.metadata.readonly
 * https://www.googleapis.com/auth/drive.readonly
 */
class AboutResource_GetMethod : public DriveServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   */
  AboutResource_GetMethod(
        const DriveService* _service_,
        client::AuthorizationCredential* _credential_);

  /**
   * Standard destructor.
   */
  virtual ~AboutResource_GetMethod();


    /**
     * Clears the '<code>includeSubscribed</code>' attribute so it is no longer
     * set.
     */
    void clear_include_subscribed() {
      _have_include_subscribed_ = false;
      client::ClearCppValueHelper(&include_subscribed_);
    }
    /**
     * @deprecated
     * @see clear_include_subscribed
     */
    void clear_includeSubscribed() {
      clear_include_subscribed();
    }

    /**
     * Gets the optional '<code>includeSubscribed</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_include_subscribed() const { return include_subscribed_; }

    /**
     * Sets the '<code>includeSubscribed</code>' attribute.
     *
     * @param[in] value When calculating the number of remaining change IDs,
     * whether to include public files the user has opened and shared files.
     * When set to false, this counts only change IDs for owned files and any
     * shared or public files that the user has explicitly added to a folder
     * they own.
     */
    void set_include_subscribed(bool value) {
      _have_include_subscribed_ = true;
      include_subscribed_ = value;
    }

    /**
     * Clears the '<code>maxChangeIdCount</code>' attribute so it is no longer
     * set.
     */
    void clear_max_change_id_count() {
      _have_max_change_id_count_ = false;
      client::ClearCppValueHelper(&max_change_id_count_);
    }
    /**
     * @deprecated
     * @see clear_max_change_id_count
     */
    void clear_maxChangeIdCount() {
      clear_max_change_id_count();
    }

    /**
     * Gets the optional '<code>maxChangeIdCount</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int64 get_max_change_id_count() const { return max_change_id_count_; }

    /**
     * Sets the '<code>maxChangeIdCount</code>' attribute.
     *
     * @param[in] value Maximum number of remaining change IDs to count.
     */
    void set_max_change_id_count(int64 value) {
      _have_max_change_id_count_ = true;
      max_change_id_count_ = value;
    }

    /**
     * Clears the '<code>startChangeId</code>' attribute so it is no longer set.
     */
    void clear_start_change_id() {
      _have_start_change_id_ = false;
      client::ClearCppValueHelper(&start_change_id_);
    }
    /**
     * @deprecated
     * @see clear_start_change_id
     */
    void clear_startChangeId() {
      clear_start_change_id();
    }

    /**
     * Gets the optional '<code>startChangeId</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int64 get_start_change_id() const { return start_change_id_; }

    /**
     * Sets the '<code>startChangeId</code>' attribute.
     *
     * @param[in] value Change ID to start counting from when calculating number
     * of remaining change IDs.
     */
    void set_start_change_id(int64 value) {
      _have_start_change_id_ = true;
      start_change_id_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      About* data) {
    return DriveServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  bool include_subscribed_;
  int64 max_change_id_count_;
  int64 start_change_id_;
  bool _have_include_subscribed_ : 1;
  bool _have_max_change_id_count_ : 1;
  bool _have_start_change_id_ : 1;
  DISALLOW_COPY_AND_ASSIGN(AboutResource_GetMethod);
};



/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.appdata
 * https://www.googleapis.com/auth/drive.apps.readonly
 * https://www.googleapis.com/auth/drive.file
 * https://www.googleapis.com/auth/drive.metadata.readonly
 * https://www.googleapis.com/auth/drive.readonly
 */
class AppsResource_GetMethod : public DriveServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] app_id The ID of the app.
   *
   */
  AppsResource_GetMethod(
        const DriveService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& app_id);

  /**
   * Standard destructor.
   */
  virtual ~AppsResource_GetMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      App* data) {
    return DriveServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string app_id_;
  DISALLOW_COPY_AND_ASSIGN(AppsResource_GetMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive.apps.readonly
 */
class AppsResource_ListMethod : public DriveServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   */
  AppsResource_ListMethod(
        const DriveService* _service_,
        client::AuthorizationCredential* _credential_);

  /**
   * Standard destructor.
   */
  virtual ~AppsResource_ListMethod();


    /**
     * Clears the '<code>languageCode</code>' attribute so it is no longer set.
     */
    void clear_language_code() {
      _have_language_code_ = false;
      client::ClearCppValueHelper(&language_code_);
    }
    /**
     * @deprecated
     * @see clear_language_code
     */
    void clear_languageCode() {
      clear_language_code();
    }

    /**
     * Gets the optional '<code>languageCode</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_language_code() const { return language_code_; }

    /**
     * Gets a modifiable pointer to the optional <code>languageCode</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_languageCode() {
      _have_language_code_ = true;
      return &language_code_;
    }


    /**
     * Sets the '<code>languageCode</code>' attribute.
     *
     * @param[in] value A language or locale code, as defined by BCP 47, with
     * some extensions from Unicode's LDML format
     * (http://www.unicode.org/reports/tr35/).
     */
    void set_language_code(const string& value) {
      _have_language_code_ = true;
      language_code_ = value;
    }



    /**
     * Clears the '<code>appFilterExtensions</code>' attribute so it is no
     * longer set.
     */
    void clear_app_filter_extensions() {
      _have_app_filter_extensions_ = false;
      client::ClearCppValueHelper(&app_filter_extensions_);
    }
    /**
     * @deprecated
     * @see clear_app_filter_extensions
     */
    void clear_appFilterExtensions() {
      clear_app_filter_extensions();
    }

    /**
     * Gets the optional '<code>appFilterExtensions</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_app_filter_extensions() const { return app_filter_extensions_; }

    /**
     * Gets a modifiable pointer to the optional
     * <code>appFilterExtensions</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_appFilterExtensions() {
      _have_app_filter_extensions_ = true;
      return &app_filter_extensions_;
    }


    /**
     * Sets the '<code>appFilterExtensions</code>' attribute.
     *
     * @param[in] value A comma-separated list of file extensions for open with
     * filtering. All apps within the given app query scope which can open any
     * of the given file extensions will be included in the response. If
     * appFilterMimeTypes are provided as well, the result is a union of the two
     * resulting app lists.
     */
    void set_app_filter_extensions(const string& value) {
      _have_app_filter_extensions_ = true;
      app_filter_extensions_ = value;
    }



    /**
     * Clears the '<code>appFilterMimeTypes</code>' attribute so it is no longer
     * set.
     */
    void clear_app_filter_mime_types() {
      _have_app_filter_mime_types_ = false;
      client::ClearCppValueHelper(&app_filter_mime_types_);
    }
    /**
     * @deprecated
     * @see clear_app_filter_mime_types
     */
    void clear_appFilterMimeTypes() {
      clear_app_filter_mime_types();
    }

    /**
     * Gets the optional '<code>appFilterMimeTypes</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_app_filter_mime_types() const { return app_filter_mime_types_; }

    /**
     * Gets a modifiable pointer to the optional
     * <code>appFilterMimeTypes</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_appFilterMimeTypes() {
      _have_app_filter_mime_types_ = true;
      return &app_filter_mime_types_;
    }


    /**
     * Sets the '<code>appFilterMimeTypes</code>' attribute.
     *
     * @param[in] value A comma-separated list of MIME types for open with
     * filtering. All apps within the given app query scope which can open any
     * of the given MIME types will be included in the response. If
     * appFilterExtensions are provided as well, the result is a union of the
     * two resulting app lists.
     */
    void set_app_filter_mime_types(const string& value) {
      _have_app_filter_mime_types_ = true;
      app_filter_mime_types_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      AppList* data) {
    return DriveServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string language_code_;
  string app_filter_extensions_;
  string app_filter_mime_types_;
  bool _have_language_code_ : 1;
  bool _have_app_filter_extensions_ : 1;
  bool _have_app_filter_mime_types_ : 1;
  DISALLOW_COPY_AND_ASSIGN(AppsResource_ListMethod);
};



/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.appdata
 * https://www.googleapis.com/auth/drive.apps.readonly
 * https://www.googleapis.com/auth/drive.file
 * https://www.googleapis.com/auth/drive.metadata.readonly
 * https://www.googleapis.com/auth/drive.readonly
 */
class ChangesResource_GetMethod : public DriveServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] change_id The ID of the change.
   *
   */
  ChangesResource_GetMethod(
        const DriveService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& change_id);

  /**
   * Standard destructor.
   */
  virtual ~ChangesResource_GetMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Change* data) {
    return DriveServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string change_id_;
  DISALLOW_COPY_AND_ASSIGN(ChangesResource_GetMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.appdata
 * https://www.googleapis.com/auth/drive.apps.readonly
 * https://www.googleapis.com/auth/drive.file
 * https://www.googleapis.com/auth/drive.metadata.readonly
 * https://www.googleapis.com/auth/drive.readonly
 */
class ChangesResource_ListMethod : public DriveServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   */
  ChangesResource_ListMethod(
        const DriveService* _service_,
        client::AuthorizationCredential* _credential_);

  /**
   * Standard destructor.
   */
  virtual ~ChangesResource_ListMethod();


    /**
     * Clears the '<code>includeSubscribed</code>' attribute so it is no longer
     * set.
     */
    void clear_include_subscribed() {
      _have_include_subscribed_ = false;
      client::ClearCppValueHelper(&include_subscribed_);
    }
    /**
     * @deprecated
     * @see clear_include_subscribed
     */
    void clear_includeSubscribed() {
      clear_include_subscribed();
    }

    /**
     * Gets the optional '<code>includeSubscribed</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_include_subscribed() const { return include_subscribed_; }

    /**
     * Sets the '<code>includeSubscribed</code>' attribute.
     *
     * @param[in] value Whether to include public files the user has opened and
     * shared files. When set to false, the list only includes owned files plus
     * any shared or public files the user has explicitly added to a folder they
     * own.
     */
    void set_include_subscribed(bool value) {
      _have_include_subscribed_ = true;
      include_subscribed_ = value;
    }

    /**
     * Clears the '<code>startChangeId</code>' attribute so it is no longer set.
     */
    void clear_start_change_id() {
      _have_start_change_id_ = false;
      client::ClearCppValueHelper(&start_change_id_);
    }
    /**
     * @deprecated
     * @see clear_start_change_id
     */
    void clear_startChangeId() {
      clear_start_change_id();
    }

    /**
     * Gets the optional '<code>startChangeId</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int64 get_start_change_id() const { return start_change_id_; }

    /**
     * Sets the '<code>startChangeId</code>' attribute.
     *
     * @param[in] value Change ID to start listing changes from.
     */
    void set_start_change_id(int64 value) {
      _have_start_change_id_ = true;
      start_change_id_ = value;
    }

    /**
     * Clears the '<code>includeDeleted</code>' attribute so it is no longer
     * set.
     */
    void clear_include_deleted() {
      _have_include_deleted_ = false;
      client::ClearCppValueHelper(&include_deleted_);
    }
    /**
     * @deprecated
     * @see clear_include_deleted
     */
    void clear_includeDeleted() {
      clear_include_deleted();
    }

    /**
     * Gets the optional '<code>includeDeleted</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_include_deleted() const { return include_deleted_; }

    /**
     * Sets the '<code>includeDeleted</code>' attribute.
     *
     * @param[in] value Whether to include deleted items.
     */
    void set_include_deleted(bool value) {
      _have_include_deleted_ = true;
      include_deleted_ = value;
    }

    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }
    /**
     * @deprecated
     * @see clear_max_results
     */
    void clear_maxResults() {
      clear_max_results();
    }

    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value Maximum number of changes to return.
     */
    void set_max_results(int32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }
    /**
     * @deprecated
     * @see clear_page_token
     */
    void clear_pageToken() {
      clear_page_token();
    }

    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value Page token for changes.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      ChangeList* data) {
    return DriveServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  bool include_subscribed_;
  int64 start_change_id_;
  bool include_deleted_;
  int32 max_results_;
  string page_token_;
  bool _have_include_subscribed_ : 1;
  bool _have_start_change_id_ : 1;
  bool _have_include_deleted_ : 1;
  bool _have_max_results_ : 1;
  bool _have_page_token_ : 1;
  DISALLOW_COPY_AND_ASSIGN(ChangesResource_ListMethod);
};

typedef client::ServiceRequestPager<
            ChangesResource_ListMethod,
            ChangeList>
        ChangesResource_ListMethodPager;

/**
 * Implements the watch method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.appdata
 * https://www.googleapis.com/auth/drive.apps.readonly
 * https://www.googleapis.com/auth/drive.file
 * https://www.googleapis.com/auth/drive.metadata.readonly
 * https://www.googleapis.com/auth/drive.readonly
 */
class ChangesResource_WatchMethod : public DriveServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] _content_ The data object to watch.
   *
   */
  ChangesResource_WatchMethod(
        const DriveService* _service_,
        client::AuthorizationCredential* _credential_,
        const Channel& _content_
    );

  /**
   * Standard destructor.
   */
  virtual ~ChangesResource_WatchMethod();


    /**
     * Clears the '<code>includeSubscribed</code>' attribute so it is no longer
     * set.
     */
    void clear_include_subscribed() {
      _have_include_subscribed_ = false;
      client::ClearCppValueHelper(&include_subscribed_);
    }
    /**
     * @deprecated
     * @see clear_include_subscribed
     */
    void clear_includeSubscribed() {
      clear_include_subscribed();
    }

    /**
     * Gets the optional '<code>includeSubscribed</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_include_subscribed() const { return include_subscribed_; }

    /**
     * Sets the '<code>includeSubscribed</code>' attribute.
     *
     * @param[in] value Whether to include public files the user has opened and
     * shared files. When set to false, the list only includes owned files plus
     * any shared or public files the user has explicitly added to a folder they
     * own.
     */
    void set_include_subscribed(bool value) {
      _have_include_subscribed_ = true;
      include_subscribed_ = value;
    }

    /**
     * Clears the '<code>startChangeId</code>' attribute so it is no longer set.
     */
    void clear_start_change_id() {
      _have_start_change_id_ = false;
      client::ClearCppValueHelper(&start_change_id_);
    }
    /**
     * @deprecated
     * @see clear_start_change_id
     */
    void clear_startChangeId() {
      clear_start_change_id();
    }

    /**
     * Gets the optional '<code>startChangeId</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int64 get_start_change_id() const { return start_change_id_; }

    /**
     * Sets the '<code>startChangeId</code>' attribute.
     *
     * @param[in] value Change ID to start listing changes from.
     */
    void set_start_change_id(int64 value) {
      _have_start_change_id_ = true;
      start_change_id_ = value;
    }

    /**
     * Clears the '<code>includeDeleted</code>' attribute so it is no longer
     * set.
     */
    void clear_include_deleted() {
      _have_include_deleted_ = false;
      client::ClearCppValueHelper(&include_deleted_);
    }
    /**
     * @deprecated
     * @see clear_include_deleted
     */
    void clear_includeDeleted() {
      clear_include_deleted();
    }

    /**
     * Gets the optional '<code>includeDeleted</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_include_deleted() const { return include_deleted_; }

    /**
     * Sets the '<code>includeDeleted</code>' attribute.
     *
     * @param[in] value Whether to include deleted items.
     */
    void set_include_deleted(bool value) {
      _have_include_deleted_ = true;
      include_deleted_ = value;
    }

    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }
    /**
     * @deprecated
     * @see clear_max_results
     */
    void clear_maxResults() {
      clear_max_results();
    }

    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value Maximum number of changes to return.
     */
    void set_max_results(int32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }
    /**
     * @deprecated
     * @see clear_page_token
     */
    void clear_pageToken() {
      clear_page_token();
    }

    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value Page token for changes.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Channel* data) {
    return DriveServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  bool include_subscribed_;
  int64 start_change_id_;
  bool include_deleted_;
  int32 max_results_;
  string page_token_;
  bool _have_include_subscribed_ : 1;
  bool _have_start_change_id_ : 1;
  bool _have_include_deleted_ : 1;
  bool _have_max_results_ : 1;
  bool _have_page_token_ : 1;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(ChangesResource_WatchMethod);
};



/**
 * Implements the stop method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.appdata
 * https://www.googleapis.com/auth/drive.apps.readonly
 * https://www.googleapis.com/auth/drive.file
 * https://www.googleapis.com/auth/drive.metadata.readonly
 * https://www.googleapis.com/auth/drive.readonly
 */
class ChannelsResource_StopMethod : public DriveServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] _content_ The data object to stop.
   *
   */
  ChannelsResource_StopMethod(
        const DriveService* _service_,
        client::AuthorizationCredential* _credential_,
        const Channel& _content_
    );

  /**
   * Standard destructor.
   */
  virtual ~ChannelsResource_StopMethod();

 private:
  string _content_;
  DISALLOW_COPY_AND_ASSIGN(ChannelsResource_StopMethod);
};



/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.file
 */
class ChildrenResource_DeleteMethod : public DriveServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] folder_id The ID of the folder.
   *
   * @param[in] child_id The ID of the child.
   *
   */
  ChildrenResource_DeleteMethod(
        const DriveService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& folder_id,
        const StringPiece& child_id);

  /**
   * Standard destructor.
   */
  virtual ~ChildrenResource_DeleteMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


 private:
  string folder_id_;
  string child_id_;
  DISALLOW_COPY_AND_ASSIGN(ChildrenResource_DeleteMethod);
};

/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.appdata
 * https://www.googleapis.com/auth/drive.file
 * https://www.googleapis.com/auth/drive.metadata.readonly
 * https://www.googleapis.com/auth/drive.readonly
 */
class ChildrenResource_GetMethod : public DriveServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] folder_id The ID of the folder.
   *
   * @param[in] child_id The ID of the child.
   *
   */
  ChildrenResource_GetMethod(
        const DriveService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& folder_id,
        const StringPiece& child_id);

  /**
   * Standard destructor.
   */
  virtual ~ChildrenResource_GetMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      ChildReference* data) {
    return DriveServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string folder_id_;
  string child_id_;
  DISALLOW_COPY_AND_ASSIGN(ChildrenResource_GetMethod);
};

/**
 * Implements the insert method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.appdata
 * https://www.googleapis.com/auth/drive.file
 */
class ChildrenResource_InsertMethod : public DriveServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] folder_id The ID of the folder.
   *
   * @param[in] _content_ The data object to insert.
   *
   */
  ChildrenResource_InsertMethod(
        const DriveService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& folder_id,
        const ChildReference& _content_
    );

  /**
   * Standard destructor.
   */
  virtual ~ChildrenResource_InsertMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      ChildReference* data) {
    return DriveServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string folder_id_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(ChildrenResource_InsertMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.appdata
 * https://www.googleapis.com/auth/drive.file
 * https://www.googleapis.com/auth/drive.metadata.readonly
 * https://www.googleapis.com/auth/drive.readonly
 */
class ChildrenResource_ListMethod : public DriveServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] folder_id The ID of the folder.
   *
   */
  ChildrenResource_ListMethod(
        const DriveService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& folder_id);

  /**
   * Standard destructor.
   */
  virtual ~ChildrenResource_ListMethod();


    /**
     * Clears the '<code>q</code>' attribute so it is no longer set.
     */
    void clear_q() {
      _have_q_ = false;
      client::ClearCppValueHelper(&q_);
    }


    /**
     * Gets the optional '<code>q</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_q() const { return q_; }

    /**
     * Gets a modifiable pointer to the optional <code>q</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_q() {
      _have_q_ = true;
      return &q_;
    }


    /**
     * Sets the '<code>q</code>' attribute.
     *
     * @param[in] value Query string for searching children.
     */
    void set_q(const string& value) {
      _have_q_ = true;
      q_ = value;
    }



    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }
    /**
     * @deprecated
     * @see clear_page_token
     */
    void clear_pageToken() {
      clear_page_token();
    }

    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value Page token for children.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }



    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }
    /**
     * @deprecated
     * @see clear_max_results
     */
    void clear_maxResults() {
      clear_max_results();
    }

    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value Maximum number of children to return.
     */
    void set_max_results(int32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      ChildList* data) {
    return DriveServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string folder_id_;
  string q_;
  string page_token_;
  int32 max_results_;
  bool _have_q_ : 1;
  bool _have_page_token_ : 1;
  bool _have_max_results_ : 1;
  DISALLOW_COPY_AND_ASSIGN(ChildrenResource_ListMethod);
};

typedef client::ServiceRequestPager<
            ChildrenResource_ListMethod,
            ChildList>
        ChildrenResource_ListMethodPager;



/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.file
 * https://www.googleapis.com/auth/drive.readonly
 */
class CommentsResource_DeleteMethod : public DriveServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] file_id The ID of the file.
   *
   * @param[in] comment_id The ID of the comment.
   *
   */
  CommentsResource_DeleteMethod(
        const DriveService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& file_id,
        const StringPiece& comment_id);

  /**
   * Standard destructor.
   */
  virtual ~CommentsResource_DeleteMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


 private:
  string file_id_;
  string comment_id_;
  DISALLOW_COPY_AND_ASSIGN(CommentsResource_DeleteMethod);
};

/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.file
 * https://www.googleapis.com/auth/drive.readonly
 */
class CommentsResource_GetMethod : public DriveServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] file_id The ID of the file.
   *
   * @param[in] comment_id The ID of the comment.
   *
   */
  CommentsResource_GetMethod(
        const DriveService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& file_id,
        const StringPiece& comment_id);

  /**
   * Standard destructor.
   */
  virtual ~CommentsResource_GetMethod();


    /**
     * Clears the '<code>includeDeleted</code>' attribute so it is no longer
     * set.
     */
    void clear_include_deleted() {
      _have_include_deleted_ = false;
      client::ClearCppValueHelper(&include_deleted_);
    }
    /**
     * @deprecated
     * @see clear_include_deleted
     */
    void clear_includeDeleted() {
      clear_include_deleted();
    }

    /**
     * Gets the optional '<code>includeDeleted</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_include_deleted() const { return include_deleted_; }

    /**
     * Sets the '<code>includeDeleted</code>' attribute.
     *
     * @param[in] value If set, this will succeed when retrieving a deleted
     * comment, and will include any deleted replies.
     */
    void set_include_deleted(bool value) {
      _have_include_deleted_ = true;
      include_deleted_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Comment* data) {
    return DriveServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string file_id_;
  string comment_id_;
  bool include_deleted_;
  bool _have_include_deleted_ : 1;
  DISALLOW_COPY_AND_ASSIGN(CommentsResource_GetMethod);
};

/**
 * Implements the insert method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.file
 */
class CommentsResource_InsertMethod : public DriveServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] file_id The ID of the file.
   *
   * @param[in] _content_ The data object to insert.
   *
   */
  CommentsResource_InsertMethod(
        const DriveService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& file_id,
        const Comment& _content_
    );

  /**
   * Standard destructor.
   */
  virtual ~CommentsResource_InsertMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Comment* data) {
    return DriveServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string file_id_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(CommentsResource_InsertMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.file
 * https://www.googleapis.com/auth/drive.readonly
 */
class CommentsResource_ListMethod : public DriveServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] file_id The ID of the file.
   *
   */
  CommentsResource_ListMethod(
        const DriveService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& file_id);

  /**
   * Standard destructor.
   */
  virtual ~CommentsResource_ListMethod();


    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }
    /**
     * @deprecated
     * @see clear_page_token
     */
    void clear_pageToken() {
      clear_page_token();
    }

    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value The continuation token, used to page through large
     * result sets. To get the next page of results, set this parameter to the
     * value of "nextPageToken" from the previous response.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }



    /**
     * Clears the '<code>updatedMin</code>' attribute so it is no longer set.
     */
    void clear_updated_min() {
      _have_updated_min_ = false;
      client::ClearCppValueHelper(&updated_min_);
    }
    /**
     * @deprecated
     * @see clear_updated_min
     */
    void clear_updatedMin() {
      clear_updated_min();
    }

    /**
     * Gets the optional '<code>updatedMin</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_updated_min() const { return updated_min_; }

    /**
     * Gets a modifiable pointer to the optional <code>updatedMin</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_updatedMin() {
      _have_updated_min_ = true;
      return &updated_min_;
    }


    /**
     * Sets the '<code>updatedMin</code>' attribute.
     *
     * @param[in] value Only discussions that were updated after this timestamp
     * will be returned. Formatted as an RFC 3339 timestamp.
     */
    void set_updated_min(const string& value) {
      _have_updated_min_ = true;
      updated_min_ = value;
    }



    /**
     * Clears the '<code>includeDeleted</code>' attribute so it is no longer
     * set.
     */
    void clear_include_deleted() {
      _have_include_deleted_ = false;
      client::ClearCppValueHelper(&include_deleted_);
    }
    /**
     * @deprecated
     * @see clear_include_deleted
     */
    void clear_includeDeleted() {
      clear_include_deleted();
    }

    /**
     * Gets the optional '<code>includeDeleted</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_include_deleted() const { return include_deleted_; }

    /**
     * Sets the '<code>includeDeleted</code>' attribute.
     *
     * @param[in] value If set, all comments and replies, including deleted
     * comments and replies (with content stripped) will be returned.
     */
    void set_include_deleted(bool value) {
      _have_include_deleted_ = true;
      include_deleted_ = value;
    }

    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }
    /**
     * @deprecated
     * @see clear_max_results
     */
    void clear_maxResults() {
      clear_max_results();
    }

    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value The maximum number of discussions to include in the
     * response, used for paging.
     */
    void set_max_results(int32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      CommentList* data) {
    return DriveServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string file_id_;
  string page_token_;
  string updated_min_;
  bool include_deleted_;
  int32 max_results_;
  bool _have_page_token_ : 1;
  bool _have_updated_min_ : 1;
  bool _have_include_deleted_ : 1;
  bool _have_max_results_ : 1;
  DISALLOW_COPY_AND_ASSIGN(CommentsResource_ListMethod);
};

typedef client::ServiceRequestPager<
            CommentsResource_ListMethod,
            CommentList>
        CommentsResource_ListMethodPager;

/**
 * Implements the patch method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.file
 */
class CommentsResource_PatchMethod : public DriveServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] file_id The ID of the file.
   *
   * @param[in] comment_id The ID of the comment.
   *
   * @param[in] _content_ The data object to patch.
   *
   */
  CommentsResource_PatchMethod(
        const DriveService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& file_id,
        const StringPiece& comment_id,
        const Comment& _content_
    );

  /**
   * Standard destructor.
   */
  virtual ~CommentsResource_PatchMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Comment* data) {
    return DriveServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string file_id_;
  string comment_id_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(CommentsResource_PatchMethod);
};

/**
 * Implements the update method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.file
 */
class CommentsResource_UpdateMethod : public DriveServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] file_id The ID of the file.
   *
   * @param[in] comment_id The ID of the comment.
   *
   * @param[in] _content_ The data object to update.
   *
   */
  CommentsResource_UpdateMethod(
        const DriveService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& file_id,
        const StringPiece& comment_id,
        const Comment& _content_
    );

  /**
   * Standard destructor.
   */
  virtual ~CommentsResource_UpdateMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Comment* data) {
    return DriveServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string file_id_;
  string comment_id_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(CommentsResource_UpdateMethod);
};



/**
 * Implements the copy method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.appdata
 * https://www.googleapis.com/auth/drive.apps.readonly
 * https://www.googleapis.com/auth/drive.file
 */
class FilesResource_CopyMethod : public DriveServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] file_id The ID of the file to copy.
   *
   * @param[in] _content_ The data object to copy.
   *
   */
  FilesResource_CopyMethod(
        const DriveService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& file_id,
        const File& _content_
    );

  /**
   * Standard destructor.
   */
  virtual ~FilesResource_CopyMethod();


    /**
     * Clears the '<code>convert</code>' attribute so it is no longer set.
     */
    void clear_convert() {
      _have_convert_ = false;
      client::ClearCppValueHelper(&convert_);
    }


    /**
     * Gets the optional '<code>convert</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_convert() const { return convert_; }

    /**
     * Sets the '<code>convert</code>' attribute.
     *
     * @param[in] value Whether to convert this file to the corresponding Google
     * Docs format.
     */
    void set_convert(bool value) {
      _have_convert_ = true;
      convert_ = value;
    }

    /**
     * Clears the '<code>ocrLanguage</code>' attribute so it is no longer set.
     */
    void clear_ocr_language() {
      _have_ocr_language_ = false;
      client::ClearCppValueHelper(&ocr_language_);
    }
    /**
     * @deprecated
     * @see clear_ocr_language
     */
    void clear_ocrLanguage() {
      clear_ocr_language();
    }

    /**
     * Gets the optional '<code>ocrLanguage</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_ocr_language() const { return ocr_language_; }

    /**
     * Gets a modifiable pointer to the optional <code>ocrLanguage</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_ocrLanguage() {
      _have_ocr_language_ = true;
      return &ocr_language_;
    }


    /**
     * Sets the '<code>ocrLanguage</code>' attribute.
     *
     * @param[in] value If ocr is true, hints at the language to use. Valid
     * values are ISO 639-1 codes.
     */
    void set_ocr_language(const string& value) {
      _have_ocr_language_ = true;
      ocr_language_ = value;
    }



    /**
     * Clears the '<code>visibility</code>' attribute so it is no longer set.
     */
    void clear_visibility() {
      _have_visibility_ = false;
      client::ClearCppValueHelper(&visibility_);
    }


    /**
     * Gets the optional '<code>visibility</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_visibility() const { return visibility_; }

    /**
     * Gets a modifiable pointer to the optional <code>visibility</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_visibility() {
      _have_visibility_ = true;
      return &visibility_;
    }


    /**
     * Sets the '<code>visibility</code>' attribute.
     *
     * @param[in] value The visibility of the new file. This parameter is only
     * relevant when the source is not a native Google Doc and convert=false.
     */
    void set_visibility(const string& value) {
      _have_visibility_ = true;
      visibility_ = value;
    }



    /**
     * Clears the '<code>pinned</code>' attribute so it is no longer set.
     */
    void clear_pinned() {
      _have_pinned_ = false;
      client::ClearCppValueHelper(&pinned_);
    }


    /**
     * Gets the optional '<code>pinned</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_pinned() const { return pinned_; }

    /**
     * Sets the '<code>pinned</code>' attribute.
     *
     * @param[in] value Whether to pin the head revision of the new copy. A file
     * can have a maximum of 200 pinned revisions.
     */
    void set_pinned(bool value) {
      _have_pinned_ = true;
      pinned_ = value;
    }

    /**
     * Clears the '<code>ocr</code>' attribute so it is no longer set.
     */
    void clear_ocr() {
      _have_ocr_ = false;
      client::ClearCppValueHelper(&ocr_);
    }


    /**
     * Gets the optional '<code>ocr</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_ocr() const { return ocr_; }

    /**
     * Sets the '<code>ocr</code>' attribute.
     *
     * @param[in] value Whether to attempt OCR on .jpg, .png, .gif, or .pdf
     * uploads.
     */
    void set_ocr(bool value) {
      _have_ocr_ = true;
      ocr_ = value;
    }

    /**
     * Clears the '<code>timedTextTrackName</code>' attribute so it is no longer
     * set.
     */
    void clear_timed_text_track_name() {
      _have_timed_text_track_name_ = false;
      client::ClearCppValueHelper(&timed_text_track_name_);
    }
    /**
     * @deprecated
     * @see clear_timed_text_track_name
     */
    void clear_timedTextTrackName() {
      clear_timed_text_track_name();
    }

    /**
     * Gets the optional '<code>timedTextTrackName</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_timed_text_track_name() const { return timed_text_track_name_; }

    /**
     * Gets a modifiable pointer to the optional
     * <code>timedTextTrackName</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_timedTextTrackName() {
      _have_timed_text_track_name_ = true;
      return &timed_text_track_name_;
    }


    /**
     * Sets the '<code>timedTextTrackName</code>' attribute.
     *
     * @param[in] value The timed text track name.
     */
    void set_timed_text_track_name(const string& value) {
      _have_timed_text_track_name_ = true;
      timed_text_track_name_ = value;
    }



    /**
     * Clears the '<code>timedTextLanguage</code>' attribute so it is no longer
     * set.
     */
    void clear_timed_text_language() {
      _have_timed_text_language_ = false;
      client::ClearCppValueHelper(&timed_text_language_);
    }
    /**
     * @deprecated
     * @see clear_timed_text_language
     */
    void clear_timedTextLanguage() {
      clear_timed_text_language();
    }

    /**
     * Gets the optional '<code>timedTextLanguage</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_timed_text_language() const { return timed_text_language_; }

    /**
     * Gets a modifiable pointer to the optional <code>timedTextLanguage</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_timedTextLanguage() {
      _have_timed_text_language_ = true;
      return &timed_text_language_;
    }


    /**
     * Sets the '<code>timedTextLanguage</code>' attribute.
     *
     * @param[in] value The language of the timed text.
     */
    void set_timed_text_language(const string& value) {
      _have_timed_text_language_ = true;
      timed_text_language_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      File* data) {
    return DriveServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string file_id_;
  bool convert_;
  string ocr_language_;
  string visibility_;
  bool pinned_;
  bool ocr_;
  string timed_text_track_name_;
  string timed_text_language_;
  bool _have_convert_ : 1;
  bool _have_ocr_language_ : 1;
  bool _have_visibility_ : 1;
  bool _have_pinned_ : 1;
  bool _have_ocr_ : 1;
  bool _have_timed_text_track_name_ : 1;
  bool _have_timed_text_language_ : 1;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(FilesResource_CopyMethod);
};

/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.appdata
 * https://www.googleapis.com/auth/drive.file
 */
class FilesResource_DeleteMethod : public DriveServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] file_id The ID of the file to delete.
   *
   */
  FilesResource_DeleteMethod(
        const DriveService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& file_id);

  /**
   * Standard destructor.
   */
  virtual ~FilesResource_DeleteMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


 private:
  string file_id_;
  DISALLOW_COPY_AND_ASSIGN(FilesResource_DeleteMethod);
};

/**
 * Implements the emptyTrash method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 */
class FilesResource_EmptyTrashMethod : public DriveServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   */
  FilesResource_EmptyTrashMethod(
        const DriveService* _service_,
        client::AuthorizationCredential* _credential_);

  /**
   * Standard destructor.
   */
  virtual ~FilesResource_EmptyTrashMethod();

 private:

  DISALLOW_COPY_AND_ASSIGN(FilesResource_EmptyTrashMethod);
};

/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.appdata
 * https://www.googleapis.com/auth/drive.apps.readonly
 * https://www.googleapis.com/auth/drive.file
 * https://www.googleapis.com/auth/drive.metadata.readonly
 * https://www.googleapis.com/auth/drive.readonly
 */
class FilesResource_GetMethod : public DriveServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] file_id The ID for the file in question.
   *
   */
  FilesResource_GetMethod(
        const DriveService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& file_id);

  /**
   * Standard destructor.
   */
  virtual ~FilesResource_GetMethod();


    /**
     * Clears the '<code>acknowledgeAbuse</code>' attribute so it is no longer
     * set.
     */
    void clear_acknowledge_abuse() {
      _have_acknowledge_abuse_ = false;
      client::ClearCppValueHelper(&acknowledge_abuse_);
    }
    /**
     * @deprecated
     * @see clear_acknowledge_abuse
     */
    void clear_acknowledgeAbuse() {
      clear_acknowledge_abuse();
    }

    /**
     * Gets the optional '<code>acknowledgeAbuse</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_acknowledge_abuse() const { return acknowledge_abuse_; }

    /**
     * Sets the '<code>acknowledgeAbuse</code>' attribute.
     *
     * @param[in] value Whether the user is acknowledging the risk of
     * downloading known malware or other abusive files.
     */
    void set_acknowledge_abuse(bool value) {
      _have_acknowledge_abuse_ = true;
      acknowledge_abuse_ = value;
    }

    /**
     * Clears the '<code>updateViewedDate</code>' attribute so it is no longer
     * set.
     */
    void clear_update_viewed_date() {
      _have_update_viewed_date_ = false;
      client::ClearCppValueHelper(&update_viewed_date_);
    }
    /**
     * @deprecated
     * @see clear_update_viewed_date
     */
    void clear_updateViewedDate() {
      clear_update_viewed_date();
    }

    /**
     * Gets the optional '<code>updateViewedDate</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_update_viewed_date() const { return update_viewed_date_; }

    /**
     * Sets the '<code>updateViewedDate</code>' attribute.
     *
     * @param[in] value Whether to update the view date after successfully
     * retrieving the file.
     */
    void set_update_viewed_date(bool value) {
      _have_update_viewed_date_ = true;
      update_viewed_date_ = value;
    }

    /**
     * Clears the '<code>projection</code>' attribute so it is no longer set.
     */
    void clear_projection() {
      _have_projection_ = false;
      client::ClearCppValueHelper(&projection_);
    }


    /**
     * Gets the optional '<code>projection</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_projection() const { return projection_; }

    /**
     * Gets a modifiable pointer to the optional <code>projection</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_projection() {
      _have_projection_ = true;
      return &projection_;
    }


    /**
     * Sets the '<code>projection</code>' attribute.
     *
     * @param[in] value This parameter is deprecated and has no function.
     */
    void set_projection(const string& value) {
      _have_projection_ = true;
      projection_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      File* data) {
    return DriveServiceBaseRequest::ExecuteAndParseResponse(data);
  }

  /**
   * Determine if the request should use Media Download for the response.
   *
   * @return true for media download, false otherwise.
   */
  bool get_use_media_download() const   {
    return DriveServiceBaseRequest::get_use_media_download();
  }

  /**
   * Sets whether Media Download should be used for the response data.
   *
   * @param[in] use true to use media download, false otherwise.
   */
  void set_use_media_download(bool use) {
    DriveServiceBaseRequest::set_use_media_download(use);
  }

 private:
  string file_id_;
  bool acknowledge_abuse_;
  bool update_viewed_date_;
  string projection_;
  bool _have_acknowledge_abuse_ : 1;
  bool _have_update_viewed_date_ : 1;
  bool _have_projection_ : 1;
  DISALLOW_COPY_AND_ASSIGN(FilesResource_GetMethod);
};

/**
 * Implements the insert method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.appdata
 * https://www.googleapis.com/auth/drive.apps.readonly
 * https://www.googleapis.com/auth/drive.file
 */
class FilesResource_InsertMethod : public DriveServiceBaseRequest {
 public:

  /**
   * The standard constructor takes all the required method parameters.
   *
   * @deprecated in favor constructor that includes the media upload parameters.
   *
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] _content_ The data object to insert.
   */
  FilesResource_InsertMethod(
        const DriveService* _service_,
        client::AuthorizationCredential* _credential_);

  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] _metadata_ The metadata object to insert. If this is NULL then
   * do not upload any metadata.
   * @param[in] _media_content_type_ The content type of the data in the
   * _media_content_reader_.
   * @param[in] _media_content_reader_ The media content to insert. If
   * this is NULL then do not upload any media and ignore _media_content_type_.
   */
  FilesResource_InsertMethod(
        const DriveService* _service_,
        client::AuthorizationCredential* _credential_,
        const File* _metadata_,
        const StringPiece& _media_content_type_,
        client::DataReader* _media_content_reader_);

  /**
   * Standard destructor.
   */
  virtual ~FilesResource_InsertMethod();


    /**
     * Clears the '<code>convert</code>' attribute so it is no longer set.
     */
    void clear_convert() {
      _have_convert_ = false;
      client::ClearCppValueHelper(&convert_);
    }


    /**
     * Gets the optional '<code>convert</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_convert() const { return convert_; }

    /**
     * Sets the '<code>convert</code>' attribute.
     *
     * @param[in] value Whether to convert this file to the corresponding Google
     * Docs format.
     */
    void set_convert(bool value) {
      _have_convert_ = true;
      convert_ = value;
    }

    /**
     * Clears the '<code>useContentAsIndexableText</code>' attribute so it is no
     * longer set.
     */
    void clear_use_content_as_indexable_text() {
      _have_use_content_as_indexable_text_ = false;
      client::ClearCppValueHelper(&use_content_as_indexable_text_);
    }
    /**
     * @deprecated
     * @see clear_use_content_as_indexable_text
     */
    void clear_useContentAsIndexableText() {
      clear_use_content_as_indexable_text();
    }

    /**
     * Gets the optional '<code>useContentAsIndexableText</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_use_content_as_indexable_text() const { return use_content_as_indexable_text_; }

    /**
     * Sets the '<code>useContentAsIndexableText</code>' attribute.
     *
     * @param[in] value Whether to use the content as indexable text.
     */
    void set_use_content_as_indexable_text(bool value) {
      _have_use_content_as_indexable_text_ = true;
      use_content_as_indexable_text_ = value;
    }

    /**
     * Clears the '<code>ocrLanguage</code>' attribute so it is no longer set.
     */
    void clear_ocr_language() {
      _have_ocr_language_ = false;
      client::ClearCppValueHelper(&ocr_language_);
    }
    /**
     * @deprecated
     * @see clear_ocr_language
     */
    void clear_ocrLanguage() {
      clear_ocr_language();
    }

    /**
     * Gets the optional '<code>ocrLanguage</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_ocr_language() const { return ocr_language_; }

    /**
     * Gets a modifiable pointer to the optional <code>ocrLanguage</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_ocrLanguage() {
      _have_ocr_language_ = true;
      return &ocr_language_;
    }


    /**
     * Sets the '<code>ocrLanguage</code>' attribute.
     *
     * @param[in] value If ocr is true, hints at the language to use. Valid
     * values are ISO 639-1 codes.
     */
    void set_ocr_language(const string& value) {
      _have_ocr_language_ = true;
      ocr_language_ = value;
    }



    /**
     * Clears the '<code>visibility</code>' attribute so it is no longer set.
     */
    void clear_visibility() {
      _have_visibility_ = false;
      client::ClearCppValueHelper(&visibility_);
    }


    /**
     * Gets the optional '<code>visibility</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_visibility() const { return visibility_; }

    /**
     * Gets a modifiable pointer to the optional <code>visibility</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_visibility() {
      _have_visibility_ = true;
      return &visibility_;
    }


    /**
     * Sets the '<code>visibility</code>' attribute.
     *
     * @param[in] value The visibility of the new file. This parameter is only
     * relevant when convert=false.
     */
    void set_visibility(const string& value) {
      _have_visibility_ = true;
      visibility_ = value;
    }



    /**
     * Clears the '<code>pinned</code>' attribute so it is no longer set.
     */
    void clear_pinned() {
      _have_pinned_ = false;
      client::ClearCppValueHelper(&pinned_);
    }


    /**
     * Gets the optional '<code>pinned</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_pinned() const { return pinned_; }

    /**
     * Sets the '<code>pinned</code>' attribute.
     *
     * @param[in] value Whether to pin the head revision of the uploaded file. A
     * file can have a maximum of 200 pinned revisions.
     */
    void set_pinned(bool value) {
      _have_pinned_ = true;
      pinned_ = value;
    }

    /**
     * Clears the '<code>ocr</code>' attribute so it is no longer set.
     */
    void clear_ocr() {
      _have_ocr_ = false;
      client::ClearCppValueHelper(&ocr_);
    }


    /**
     * Gets the optional '<code>ocr</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_ocr() const { return ocr_; }

    /**
     * Sets the '<code>ocr</code>' attribute.
     *
     * @param[in] value Whether to attempt OCR on .jpg, .png, .gif, or .pdf
     * uploads.
     */
    void set_ocr(bool value) {
      _have_ocr_ = true;
      ocr_ = value;
    }

    /**
     * Clears the '<code>timedTextTrackName</code>' attribute so it is no longer
     * set.
     */
    void clear_timed_text_track_name() {
      _have_timed_text_track_name_ = false;
      client::ClearCppValueHelper(&timed_text_track_name_);
    }
    /**
     * @deprecated
     * @see clear_timed_text_track_name
     */
    void clear_timedTextTrackName() {
      clear_timed_text_track_name();
    }

    /**
     * Gets the optional '<code>timedTextTrackName</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_timed_text_track_name() const { return timed_text_track_name_; }

    /**
     * Gets a modifiable pointer to the optional
     * <code>timedTextTrackName</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_timedTextTrackName() {
      _have_timed_text_track_name_ = true;
      return &timed_text_track_name_;
    }


    /**
     * Sets the '<code>timedTextTrackName</code>' attribute.
     *
     * @param[in] value The timed text track name.
     */
    void set_timed_text_track_name(const string& value) {
      _have_timed_text_track_name_ = true;
      timed_text_track_name_ = value;
    }



    /**
     * Clears the '<code>timedTextLanguage</code>' attribute so it is no longer
     * set.
     */
    void clear_timed_text_language() {
      _have_timed_text_language_ = false;
      client::ClearCppValueHelper(&timed_text_language_);
    }
    /**
     * @deprecated
     * @see clear_timed_text_language
     */
    void clear_timedTextLanguage() {
      clear_timed_text_language();
    }

    /**
     * Gets the optional '<code>timedTextLanguage</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_timed_text_language() const { return timed_text_language_; }

    /**
     * Gets a modifiable pointer to the optional <code>timedTextLanguage</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_timedTextLanguage() {
      _have_timed_text_language_ = true;
      return &timed_text_language_;
    }


    /**
     * Sets the '<code>timedTextLanguage</code>' attribute.
     *
     * @param[in] value The language of the timed text.
     */
    void set_timed_text_language(const string& value) {
      _have_timed_text_language_ = true;
      timed_text_language_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      File* data) {
    return DriveServiceBaseRequest::ExecuteAndParseResponse(data);
  }

  /**
   * Invokes the server with the method.
   *
   * Response detail is available from the underlying http_request.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  virtual util::Status Execute();

  /**
   * Returns MediaUploader for uploading the content.
   */
  client::MediaUploader* media_uploader() {
    return _uploader_.get();
  }

  /**
   * Returns the specification for media upload using the simple protocol.
   */
  static const client::MediaUploadSpec
    SIMPLE_MEDIA_UPLOAD;
  /**
   * Returns the specification for media upload using the resumable protocol.
   */
  static const client::MediaUploadSpec
    RESUMABLE_MEDIA_UPLOAD;

 private:
  bool convert_;
  bool use_content_as_indexable_text_;
  string ocr_language_;
  string visibility_;
  bool pinned_;
  bool ocr_;
  string timed_text_track_name_;
  string timed_text_language_;
  bool _have_convert_ : 1;
  bool _have_use_content_as_indexable_text_ : 1;
  bool _have_ocr_language_ : 1;
  bool _have_visibility_ : 1;
  bool _have_pinned_ : 1;
  bool _have_ocr_ : 1;
  bool _have_timed_text_track_name_ : 1;
  bool _have_timed_text_language_ : 1;
  scoped_ptr<client::MediaUploader> _uploader_;

  DISALLOW_COPY_AND_ASSIGN(FilesResource_InsertMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.appdata
 * https://www.googleapis.com/auth/drive.apps.readonly
 * https://www.googleapis.com/auth/drive.file
 * https://www.googleapis.com/auth/drive.metadata.readonly
 * https://www.googleapis.com/auth/drive.readonly
 */
class FilesResource_ListMethod : public DriveServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   */
  FilesResource_ListMethod(
        const DriveService* _service_,
        client::AuthorizationCredential* _credential_);

  /**
   * Standard destructor.
   */
  virtual ~FilesResource_ListMethod();


    /**
     * Clears the '<code>q</code>' attribute so it is no longer set.
     */
    void clear_q() {
      _have_q_ = false;
      client::ClearCppValueHelper(&q_);
    }


    /**
     * Gets the optional '<code>q</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_q() const { return q_; }

    /**
     * Gets a modifiable pointer to the optional <code>q</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_q() {
      _have_q_ = true;
      return &q_;
    }


    /**
     * Sets the '<code>q</code>' attribute.
     *
     * @param[in] value Query string for searching files.
     */
    void set_q(const string& value) {
      _have_q_ = true;
      q_ = value;
    }



    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }
    /**
     * @deprecated
     * @see clear_page_token
     */
    void clear_pageToken() {
      clear_page_token();
    }

    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value Page token for files.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }



    /**
     * Clears the '<code>corpus</code>' attribute so it is no longer set.
     */
    void clear_corpus() {
      _have_corpus_ = false;
      client::ClearCppValueHelper(&corpus_);
    }


    /**
     * Gets the optional '<code>corpus</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_corpus() const { return corpus_; }

    /**
     * Gets a modifiable pointer to the optional <code>corpus</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_corpus() {
      _have_corpus_ = true;
      return &corpus_;
    }


    /**
     * Sets the '<code>corpus</code>' attribute.
     *
     * @param[in] value The body of items (files/documents) to which the query
     * applies.
     */
    void set_corpus(const string& value) {
      _have_corpus_ = true;
      corpus_ = value;
    }



    /**
     * Clears the '<code>projection</code>' attribute so it is no longer set.
     */
    void clear_projection() {
      _have_projection_ = false;
      client::ClearCppValueHelper(&projection_);
    }


    /**
     * Gets the optional '<code>projection</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_projection() const { return projection_; }

    /**
     * Gets a modifiable pointer to the optional <code>projection</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_projection() {
      _have_projection_ = true;
      return &projection_;
    }


    /**
     * Sets the '<code>projection</code>' attribute.
     *
     * @param[in] value This parameter is deprecated and has no function.
     */
    void set_projection(const string& value) {
      _have_projection_ = true;
      projection_ = value;
    }



    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }
    /**
     * @deprecated
     * @see clear_max_results
     */
    void clear_maxResults() {
      clear_max_results();
    }

    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value Maximum number of files to return.
     */
    void set_max_results(int32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      FileList* data) {
    return DriveServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string q_;
  string page_token_;
  string corpus_;
  string projection_;
  int32 max_results_;
  bool _have_q_ : 1;
  bool _have_page_token_ : 1;
  bool _have_corpus_ : 1;
  bool _have_projection_ : 1;
  bool _have_max_results_ : 1;
  DISALLOW_COPY_AND_ASSIGN(FilesResource_ListMethod);
};

typedef client::ServiceRequestPager<
            FilesResource_ListMethod,
            FileList>
        FilesResource_ListMethodPager;

/**
 * Implements the patch method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.appdata
 * https://www.googleapis.com/auth/drive.apps.readonly
 * https://www.googleapis.com/auth/drive.file
 * https://www.googleapis.com/auth/drive.scripts
 */
class FilesResource_PatchMethod : public DriveServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] file_id The ID of the file to update.
   *
   * @param[in] _content_ The data object to patch.
   *
   */
  FilesResource_PatchMethod(
        const DriveService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& file_id,
        const File& _content_
    );

  /**
   * Standard destructor.
   */
  virtual ~FilesResource_PatchMethod();


    /**
     * Clears the '<code>addParents</code>' attribute so it is no longer set.
     */
    void clear_add_parents() {
      _have_add_parents_ = false;
      client::ClearCppValueHelper(&add_parents_);
    }
    /**
     * @deprecated
     * @see clear_add_parents
     */
    void clear_addParents() {
      clear_add_parents();
    }

    /**
     * Gets the optional '<code>addParents</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_add_parents() const { return add_parents_; }

    /**
     * Gets a modifiable pointer to the optional <code>addParents</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_addParents() {
      _have_add_parents_ = true;
      return &add_parents_;
    }


    /**
     * Sets the '<code>addParents</code>' attribute.
     *
     * @param[in] value Comma-separated list of parent IDs to add.
     */
    void set_add_parents(const string& value) {
      _have_add_parents_ = true;
      add_parents_ = value;
    }



    /**
     * Clears the '<code>updateViewedDate</code>' attribute so it is no longer
     * set.
     */
    void clear_update_viewed_date() {
      _have_update_viewed_date_ = false;
      client::ClearCppValueHelper(&update_viewed_date_);
    }
    /**
     * @deprecated
     * @see clear_update_viewed_date
     */
    void clear_updateViewedDate() {
      clear_update_viewed_date();
    }

    /**
     * Gets the optional '<code>updateViewedDate</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_update_viewed_date() const { return update_viewed_date_; }

    /**
     * Sets the '<code>updateViewedDate</code>' attribute.
     *
     * @param[in] value Whether to update the view date after successfully
     * updating the file.
     */
    void set_update_viewed_date(bool value) {
      _have_update_viewed_date_ = true;
      update_viewed_date_ = value;
    }

    /**
     * Clears the '<code>removeParents</code>' attribute so it is no longer set.
     */
    void clear_remove_parents() {
      _have_remove_parents_ = false;
      client::ClearCppValueHelper(&remove_parents_);
    }
    /**
     * @deprecated
     * @see clear_remove_parents
     */
    void clear_removeParents() {
      clear_remove_parents();
    }

    /**
     * Gets the optional '<code>removeParents</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_remove_parents() const { return remove_parents_; }

    /**
     * Gets a modifiable pointer to the optional <code>removeParents</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_removeParents() {
      _have_remove_parents_ = true;
      return &remove_parents_;
    }


    /**
     * Sets the '<code>removeParents</code>' attribute.
     *
     * @param[in] value Comma-separated list of parent IDs to remove.
     */
    void set_remove_parents(const string& value) {
      _have_remove_parents_ = true;
      remove_parents_ = value;
    }



    /**
     * Clears the '<code>setModifiedDate</code>' attribute so it is no longer
     * set.
     */
    void clear_set_modified_date() {
      _have_set_modified_date_ = false;
      client::ClearCppValueHelper(&set_modified_date_);
    }
    /**
     * @deprecated
     * @see clear_set_modified_date
     */
    void clear_setModifiedDate() {
      clear_set_modified_date();
    }

    /**
     * Gets the optional '<code>setModifiedDate</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_set_modified_date() const { return set_modified_date_; }

    /**
     * Sets the '<code>setModifiedDate</code>' attribute.
     *
     * @param[in] value Whether to set the modified date with the supplied
     * modified date.
     */
    void set_set_modified_date(bool value) {
      _have_set_modified_date_ = true;
      set_modified_date_ = value;
    }

    /**
     * Clears the '<code>convert</code>' attribute so it is no longer set.
     */
    void clear_convert() {
      _have_convert_ = false;
      client::ClearCppValueHelper(&convert_);
    }


    /**
     * Gets the optional '<code>convert</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_convert() const { return convert_; }

    /**
     * Sets the '<code>convert</code>' attribute.
     *
     * @param[in] value Whether to convert this file to the corresponding Google
     * Docs format.
     */
    void set_convert(bool value) {
      _have_convert_ = true;
      convert_ = value;
    }

    /**
     * Clears the '<code>useContentAsIndexableText</code>' attribute so it is no
     * longer set.
     */
    void clear_use_content_as_indexable_text() {
      _have_use_content_as_indexable_text_ = false;
      client::ClearCppValueHelper(&use_content_as_indexable_text_);
    }
    /**
     * @deprecated
     * @see clear_use_content_as_indexable_text
     */
    void clear_useContentAsIndexableText() {
      clear_use_content_as_indexable_text();
    }

    /**
     * Gets the optional '<code>useContentAsIndexableText</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_use_content_as_indexable_text() const { return use_content_as_indexable_text_; }

    /**
     * Sets the '<code>useContentAsIndexableText</code>' attribute.
     *
     * @param[in] value Whether to use the content as indexable text.
     */
    void set_use_content_as_indexable_text(bool value) {
      _have_use_content_as_indexable_text_ = true;
      use_content_as_indexable_text_ = value;
    }

    /**
     * Clears the '<code>ocrLanguage</code>' attribute so it is no longer set.
     */
    void clear_ocr_language() {
      _have_ocr_language_ = false;
      client::ClearCppValueHelper(&ocr_language_);
    }
    /**
     * @deprecated
     * @see clear_ocr_language
     */
    void clear_ocrLanguage() {
      clear_ocr_language();
    }

    /**
     * Gets the optional '<code>ocrLanguage</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_ocr_language() const { return ocr_language_; }

    /**
     * Gets a modifiable pointer to the optional <code>ocrLanguage</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_ocrLanguage() {
      _have_ocr_language_ = true;
      return &ocr_language_;
    }


    /**
     * Sets the '<code>ocrLanguage</code>' attribute.
     *
     * @param[in] value If ocr is true, hints at the language to use. Valid
     * values are ISO 639-1 codes.
     */
    void set_ocr_language(const string& value) {
      _have_ocr_language_ = true;
      ocr_language_ = value;
    }



    /**
     * Clears the '<code>pinned</code>' attribute so it is no longer set.
     */
    void clear_pinned() {
      _have_pinned_ = false;
      client::ClearCppValueHelper(&pinned_);
    }


    /**
     * Gets the optional '<code>pinned</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_pinned() const { return pinned_; }

    /**
     * Sets the '<code>pinned</code>' attribute.
     *
     * @param[in] value Whether to pin the new revision. A file can have a
     * maximum of 200 pinned revisions.
     */
    void set_pinned(bool value) {
      _have_pinned_ = true;
      pinned_ = value;
    }

    /**
     * Clears the '<code>newRevision</code>' attribute so it is no longer set.
     */
    void clear_new_revision() {
      _have_new_revision_ = false;
      client::ClearCppValueHelper(&new_revision_);
    }
    /**
     * @deprecated
     * @see clear_new_revision
     */
    void clear_newRevision() {
      clear_new_revision();
    }

    /**
     * Gets the optional '<code>newRevision</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_new_revision() const { return new_revision_; }

    /**
     * Sets the '<code>newRevision</code>' attribute.
     *
     * @param[in] value Whether a blob upload should create a new revision. If
     * false, the blob data in the current head revision is replaced. If true or
     * not set, a new blob is created as head revision, and previous revisions
     * are preserved (causing increased use of the user's data storage quota).
     */
    void set_new_revision(bool value) {
      _have_new_revision_ = true;
      new_revision_ = value;
    }

    /**
     * Clears the '<code>ocr</code>' attribute so it is no longer set.
     */
    void clear_ocr() {
      _have_ocr_ = false;
      client::ClearCppValueHelper(&ocr_);
    }


    /**
     * Gets the optional '<code>ocr</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_ocr() const { return ocr_; }

    /**
     * Sets the '<code>ocr</code>' attribute.
     *
     * @param[in] value Whether to attempt OCR on .jpg, .png, .gif, or .pdf
     * uploads.
     */
    void set_ocr(bool value) {
      _have_ocr_ = true;
      ocr_ = value;
    }

    /**
     * Clears the '<code>timedTextLanguage</code>' attribute so it is no longer
     * set.
     */
    void clear_timed_text_language() {
      _have_timed_text_language_ = false;
      client::ClearCppValueHelper(&timed_text_language_);
    }
    /**
     * @deprecated
     * @see clear_timed_text_language
     */
    void clear_timedTextLanguage() {
      clear_timed_text_language();
    }

    /**
     * Gets the optional '<code>timedTextLanguage</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_timed_text_language() const { return timed_text_language_; }

    /**
     * Gets a modifiable pointer to the optional <code>timedTextLanguage</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_timedTextLanguage() {
      _have_timed_text_language_ = true;
      return &timed_text_language_;
    }


    /**
     * Sets the '<code>timedTextLanguage</code>' attribute.
     *
     * @param[in] value The language of the timed text.
     */
    void set_timed_text_language(const string& value) {
      _have_timed_text_language_ = true;
      timed_text_language_ = value;
    }



    /**
     * Clears the '<code>timedTextTrackName</code>' attribute so it is no longer
     * set.
     */
    void clear_timed_text_track_name() {
      _have_timed_text_track_name_ = false;
      client::ClearCppValueHelper(&timed_text_track_name_);
    }
    /**
     * @deprecated
     * @see clear_timed_text_track_name
     */
    void clear_timedTextTrackName() {
      clear_timed_text_track_name();
    }

    /**
     * Gets the optional '<code>timedTextTrackName</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_timed_text_track_name() const { return timed_text_track_name_; }

    /**
     * Gets a modifiable pointer to the optional
     * <code>timedTextTrackName</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_timedTextTrackName() {
      _have_timed_text_track_name_ = true;
      return &timed_text_track_name_;
    }


    /**
     * Sets the '<code>timedTextTrackName</code>' attribute.
     *
     * @param[in] value The timed text track name.
     */
    void set_timed_text_track_name(const string& value) {
      _have_timed_text_track_name_ = true;
      timed_text_track_name_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      File* data) {
    return DriveServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string file_id_;
  string add_parents_;
  bool update_viewed_date_;
  string remove_parents_;
  bool set_modified_date_;
  bool convert_;
  bool use_content_as_indexable_text_;
  string ocr_language_;
  bool pinned_;
  bool new_revision_;
  bool ocr_;
  string timed_text_language_;
  string timed_text_track_name_;
  bool _have_add_parents_ : 1;
  bool _have_update_viewed_date_ : 1;
  bool _have_remove_parents_ : 1;
  bool _have_set_modified_date_ : 1;
  bool _have_convert_ : 1;
  bool _have_use_content_as_indexable_text_ : 1;
  bool _have_ocr_language_ : 1;
  bool _have_pinned_ : 1;
  bool _have_new_revision_ : 1;
  bool _have_ocr_ : 1;
  bool _have_timed_text_language_ : 1;
  bool _have_timed_text_track_name_ : 1;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(FilesResource_PatchMethod);
};

/**
 * Implements the touch method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.appdata
 * https://www.googleapis.com/auth/drive.apps.readonly
 * https://www.googleapis.com/auth/drive.file
 */
class FilesResource_TouchMethod : public DriveServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] file_id The ID of the file to update.
   *
   */
  FilesResource_TouchMethod(
        const DriveService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& file_id);

  /**
   * Standard destructor.
   */
  virtual ~FilesResource_TouchMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      File* data) {
    return DriveServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string file_id_;
  DISALLOW_COPY_AND_ASSIGN(FilesResource_TouchMethod);
};

/**
 * Implements the trash method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.apps.readonly
 * https://www.googleapis.com/auth/drive.file
 */
class FilesResource_TrashMethod : public DriveServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] file_id The ID of the file to trash.
   *
   */
  FilesResource_TrashMethod(
        const DriveService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& file_id);

  /**
   * Standard destructor.
   */
  virtual ~FilesResource_TrashMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      File* data) {
    return DriveServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string file_id_;
  DISALLOW_COPY_AND_ASSIGN(FilesResource_TrashMethod);
};

/**
 * Implements the untrash method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.apps.readonly
 * https://www.googleapis.com/auth/drive.file
 */
class FilesResource_UntrashMethod : public DriveServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] file_id The ID of the file to untrash.
   *
   */
  FilesResource_UntrashMethod(
        const DriveService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& file_id);

  /**
   * Standard destructor.
   */
  virtual ~FilesResource_UntrashMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      File* data) {
    return DriveServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string file_id_;
  DISALLOW_COPY_AND_ASSIGN(FilesResource_UntrashMethod);
};

/**
 * Implements the update method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.appdata
 * https://www.googleapis.com/auth/drive.apps.readonly
 * https://www.googleapis.com/auth/drive.file
 * https://www.googleapis.com/auth/drive.scripts
 */
class FilesResource_UpdateMethod : public DriveServiceBaseRequest {
 public:

  /**
   * The standard constructor takes all the required method parameters.
   *
   * @deprecated in favor constructor that includes the media upload parameters.
   *
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] file_id The ID of the file to update.
   *
   * @param[in] _content_ The data object to update.
   */
  FilesResource_UpdateMethod(
        const DriveService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& file_id);

  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] file_id The ID of the file to update.
   *
   * @param[in] _metadata_ The metadata object to update. If this is NULL then
   * do not upload any metadata.
   * @param[in] _media_content_type_ The content type of the data in the
   * _media_content_reader_.
   * @param[in] _media_content_reader_ The media content to update. If
   * this is NULL then do not upload any media and ignore _media_content_type_.
   */
  FilesResource_UpdateMethod(
        const DriveService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& file_id,
        const File* _metadata_,
        const StringPiece& _media_content_type_,
        client::DataReader* _media_content_reader_);

  /**
   * Standard destructor.
   */
  virtual ~FilesResource_UpdateMethod();


    /**
     * Clears the '<code>addParents</code>' attribute so it is no longer set.
     */
    void clear_add_parents() {
      _have_add_parents_ = false;
      client::ClearCppValueHelper(&add_parents_);
    }
    /**
     * @deprecated
     * @see clear_add_parents
     */
    void clear_addParents() {
      clear_add_parents();
    }

    /**
     * Gets the optional '<code>addParents</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_add_parents() const { return add_parents_; }

    /**
     * Gets a modifiable pointer to the optional <code>addParents</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_addParents() {
      _have_add_parents_ = true;
      return &add_parents_;
    }


    /**
     * Sets the '<code>addParents</code>' attribute.
     *
     * @param[in] value Comma-separated list of parent IDs to add.
     */
    void set_add_parents(const string& value) {
      _have_add_parents_ = true;
      add_parents_ = value;
    }



    /**
     * Clears the '<code>updateViewedDate</code>' attribute so it is no longer
     * set.
     */
    void clear_update_viewed_date() {
      _have_update_viewed_date_ = false;
      client::ClearCppValueHelper(&update_viewed_date_);
    }
    /**
     * @deprecated
     * @see clear_update_viewed_date
     */
    void clear_updateViewedDate() {
      clear_update_viewed_date();
    }

    /**
     * Gets the optional '<code>updateViewedDate</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_update_viewed_date() const { return update_viewed_date_; }

    /**
     * Sets the '<code>updateViewedDate</code>' attribute.
     *
     * @param[in] value Whether to update the view date after successfully
     * updating the file.
     */
    void set_update_viewed_date(bool value) {
      _have_update_viewed_date_ = true;
      update_viewed_date_ = value;
    }

    /**
     * Clears the '<code>removeParents</code>' attribute so it is no longer set.
     */
    void clear_remove_parents() {
      _have_remove_parents_ = false;
      client::ClearCppValueHelper(&remove_parents_);
    }
    /**
     * @deprecated
     * @see clear_remove_parents
     */
    void clear_removeParents() {
      clear_remove_parents();
    }

    /**
     * Gets the optional '<code>removeParents</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_remove_parents() const { return remove_parents_; }

    /**
     * Gets a modifiable pointer to the optional <code>removeParents</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_removeParents() {
      _have_remove_parents_ = true;
      return &remove_parents_;
    }


    /**
     * Sets the '<code>removeParents</code>' attribute.
     *
     * @param[in] value Comma-separated list of parent IDs to remove.
     */
    void set_remove_parents(const string& value) {
      _have_remove_parents_ = true;
      remove_parents_ = value;
    }



    /**
     * Clears the '<code>setModifiedDate</code>' attribute so it is no longer
     * set.
     */
    void clear_set_modified_date() {
      _have_set_modified_date_ = false;
      client::ClearCppValueHelper(&set_modified_date_);
    }
    /**
     * @deprecated
     * @see clear_set_modified_date
     */
    void clear_setModifiedDate() {
      clear_set_modified_date();
    }

    /**
     * Gets the optional '<code>setModifiedDate</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_set_modified_date() const { return set_modified_date_; }

    /**
     * Sets the '<code>setModifiedDate</code>' attribute.
     *
     * @param[in] value Whether to set the modified date with the supplied
     * modified date.
     */
    void set_set_modified_date(bool value) {
      _have_set_modified_date_ = true;
      set_modified_date_ = value;
    }

    /**
     * Clears the '<code>convert</code>' attribute so it is no longer set.
     */
    void clear_convert() {
      _have_convert_ = false;
      client::ClearCppValueHelper(&convert_);
    }


    /**
     * Gets the optional '<code>convert</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_convert() const { return convert_; }

    /**
     * Sets the '<code>convert</code>' attribute.
     *
     * @param[in] value Whether to convert this file to the corresponding Google
     * Docs format.
     */
    void set_convert(bool value) {
      _have_convert_ = true;
      convert_ = value;
    }

    /**
     * Clears the '<code>useContentAsIndexableText</code>' attribute so it is no
     * longer set.
     */
    void clear_use_content_as_indexable_text() {
      _have_use_content_as_indexable_text_ = false;
      client::ClearCppValueHelper(&use_content_as_indexable_text_);
    }
    /**
     * @deprecated
     * @see clear_use_content_as_indexable_text
     */
    void clear_useContentAsIndexableText() {
      clear_use_content_as_indexable_text();
    }

    /**
     * Gets the optional '<code>useContentAsIndexableText</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_use_content_as_indexable_text() const { return use_content_as_indexable_text_; }

    /**
     * Sets the '<code>useContentAsIndexableText</code>' attribute.
     *
     * @param[in] value Whether to use the content as indexable text.
     */
    void set_use_content_as_indexable_text(bool value) {
      _have_use_content_as_indexable_text_ = true;
      use_content_as_indexable_text_ = value;
    }

    /**
     * Clears the '<code>ocrLanguage</code>' attribute so it is no longer set.
     */
    void clear_ocr_language() {
      _have_ocr_language_ = false;
      client::ClearCppValueHelper(&ocr_language_);
    }
    /**
     * @deprecated
     * @see clear_ocr_language
     */
    void clear_ocrLanguage() {
      clear_ocr_language();
    }

    /**
     * Gets the optional '<code>ocrLanguage</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_ocr_language() const { return ocr_language_; }

    /**
     * Gets a modifiable pointer to the optional <code>ocrLanguage</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_ocrLanguage() {
      _have_ocr_language_ = true;
      return &ocr_language_;
    }


    /**
     * Sets the '<code>ocrLanguage</code>' attribute.
     *
     * @param[in] value If ocr is true, hints at the language to use. Valid
     * values are ISO 639-1 codes.
     */
    void set_ocr_language(const string& value) {
      _have_ocr_language_ = true;
      ocr_language_ = value;
    }



    /**
     * Clears the '<code>pinned</code>' attribute so it is no longer set.
     */
    void clear_pinned() {
      _have_pinned_ = false;
      client::ClearCppValueHelper(&pinned_);
    }


    /**
     * Gets the optional '<code>pinned</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_pinned() const { return pinned_; }

    /**
     * Sets the '<code>pinned</code>' attribute.
     *
     * @param[in] value Whether to pin the new revision. A file can have a
     * maximum of 200 pinned revisions.
     */
    void set_pinned(bool value) {
      _have_pinned_ = true;
      pinned_ = value;
    }

    /**
     * Clears the '<code>newRevision</code>' attribute so it is no longer set.
     */
    void clear_new_revision() {
      _have_new_revision_ = false;
      client::ClearCppValueHelper(&new_revision_);
    }
    /**
     * @deprecated
     * @see clear_new_revision
     */
    void clear_newRevision() {
      clear_new_revision();
    }

    /**
     * Gets the optional '<code>newRevision</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_new_revision() const { return new_revision_; }

    /**
     * Sets the '<code>newRevision</code>' attribute.
     *
     * @param[in] value Whether a blob upload should create a new revision. If
     * false, the blob data in the current head revision is replaced. If true or
     * not set, a new blob is created as head revision, and previous revisions
     * are preserved (causing increased use of the user's data storage quota).
     */
    void set_new_revision(bool value) {
      _have_new_revision_ = true;
      new_revision_ = value;
    }

    /**
     * Clears the '<code>ocr</code>' attribute so it is no longer set.
     */
    void clear_ocr() {
      _have_ocr_ = false;
      client::ClearCppValueHelper(&ocr_);
    }


    /**
     * Gets the optional '<code>ocr</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_ocr() const { return ocr_; }

    /**
     * Sets the '<code>ocr</code>' attribute.
     *
     * @param[in] value Whether to attempt OCR on .jpg, .png, .gif, or .pdf
     * uploads.
     */
    void set_ocr(bool value) {
      _have_ocr_ = true;
      ocr_ = value;
    }

    /**
     * Clears the '<code>timedTextLanguage</code>' attribute so it is no longer
     * set.
     */
    void clear_timed_text_language() {
      _have_timed_text_language_ = false;
      client::ClearCppValueHelper(&timed_text_language_);
    }
    /**
     * @deprecated
     * @see clear_timed_text_language
     */
    void clear_timedTextLanguage() {
      clear_timed_text_language();
    }

    /**
     * Gets the optional '<code>timedTextLanguage</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_timed_text_language() const { return timed_text_language_; }

    /**
     * Gets a modifiable pointer to the optional <code>timedTextLanguage</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_timedTextLanguage() {
      _have_timed_text_language_ = true;
      return &timed_text_language_;
    }


    /**
     * Sets the '<code>timedTextLanguage</code>' attribute.
     *
     * @param[in] value The language of the timed text.
     */
    void set_timed_text_language(const string& value) {
      _have_timed_text_language_ = true;
      timed_text_language_ = value;
    }



    /**
     * Clears the '<code>timedTextTrackName</code>' attribute so it is no longer
     * set.
     */
    void clear_timed_text_track_name() {
      _have_timed_text_track_name_ = false;
      client::ClearCppValueHelper(&timed_text_track_name_);
    }
    /**
     * @deprecated
     * @see clear_timed_text_track_name
     */
    void clear_timedTextTrackName() {
      clear_timed_text_track_name();
    }

    /**
     * Gets the optional '<code>timedTextTrackName</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_timed_text_track_name() const { return timed_text_track_name_; }

    /**
     * Gets a modifiable pointer to the optional
     * <code>timedTextTrackName</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_timedTextTrackName() {
      _have_timed_text_track_name_ = true;
      return &timed_text_track_name_;
    }


    /**
     * Sets the '<code>timedTextTrackName</code>' attribute.
     *
     * @param[in] value The timed text track name.
     */
    void set_timed_text_track_name(const string& value) {
      _have_timed_text_track_name_ = true;
      timed_text_track_name_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      File* data) {
    return DriveServiceBaseRequest::ExecuteAndParseResponse(data);
  }

  /**
   * Invokes the server with the method.
   *
   * Response detail is available from the underlying http_request.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  virtual util::Status Execute();

  /**
   * Returns MediaUploader for uploading the content.
   */
  client::MediaUploader* media_uploader() {
    return _uploader_.get();
  }

  /**
   * Returns the specification for media upload using the simple protocol.
   */
  static const client::MediaUploadSpec
    SIMPLE_MEDIA_UPLOAD;
  /**
   * Returns the specification for media upload using the resumable protocol.
   */
  static const client::MediaUploadSpec
    RESUMABLE_MEDIA_UPLOAD;

 private:
  string file_id_;
  string add_parents_;
  bool update_viewed_date_;
  string remove_parents_;
  bool set_modified_date_;
  bool convert_;
  bool use_content_as_indexable_text_;
  string ocr_language_;
  bool pinned_;
  bool new_revision_;
  bool ocr_;
  string timed_text_language_;
  string timed_text_track_name_;
  bool _have_add_parents_ : 1;
  bool _have_update_viewed_date_ : 1;
  bool _have_remove_parents_ : 1;
  bool _have_set_modified_date_ : 1;
  bool _have_convert_ : 1;
  bool _have_use_content_as_indexable_text_ : 1;
  bool _have_ocr_language_ : 1;
  bool _have_pinned_ : 1;
  bool _have_new_revision_ : 1;
  bool _have_ocr_ : 1;
  bool _have_timed_text_language_ : 1;
  bool _have_timed_text_track_name_ : 1;
  scoped_ptr<client::MediaUploader> _uploader_;

  DISALLOW_COPY_AND_ASSIGN(FilesResource_UpdateMethod);
};

/**
 * Implements the watch method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.appdata
 * https://www.googleapis.com/auth/drive.apps.readonly
 * https://www.googleapis.com/auth/drive.file
 * https://www.googleapis.com/auth/drive.metadata.readonly
 * https://www.googleapis.com/auth/drive.readonly
 */
class FilesResource_WatchMethod : public DriveServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] file_id The ID for the file in question.
   *
   * @param[in] _content_ The data object to watch.
   *
   */
  FilesResource_WatchMethod(
        const DriveService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& file_id,
        const Channel& _content_
    );

  /**
   * Standard destructor.
   */
  virtual ~FilesResource_WatchMethod();


    /**
     * Clears the '<code>acknowledgeAbuse</code>' attribute so it is no longer
     * set.
     */
    void clear_acknowledge_abuse() {
      _have_acknowledge_abuse_ = false;
      client::ClearCppValueHelper(&acknowledge_abuse_);
    }
    /**
     * @deprecated
     * @see clear_acknowledge_abuse
     */
    void clear_acknowledgeAbuse() {
      clear_acknowledge_abuse();
    }

    /**
     * Gets the optional '<code>acknowledgeAbuse</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_acknowledge_abuse() const { return acknowledge_abuse_; }

    /**
     * Sets the '<code>acknowledgeAbuse</code>' attribute.
     *
     * @param[in] value Whether the user is acknowledging the risk of
     * downloading known malware or other abusive files.
     */
    void set_acknowledge_abuse(bool value) {
      _have_acknowledge_abuse_ = true;
      acknowledge_abuse_ = value;
    }

    /**
     * Clears the '<code>updateViewedDate</code>' attribute so it is no longer
     * set.
     */
    void clear_update_viewed_date() {
      _have_update_viewed_date_ = false;
      client::ClearCppValueHelper(&update_viewed_date_);
    }
    /**
     * @deprecated
     * @see clear_update_viewed_date
     */
    void clear_updateViewedDate() {
      clear_update_viewed_date();
    }

    /**
     * Gets the optional '<code>updateViewedDate</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_update_viewed_date() const { return update_viewed_date_; }

    /**
     * Sets the '<code>updateViewedDate</code>' attribute.
     *
     * @param[in] value Whether to update the view date after successfully
     * retrieving the file.
     */
    void set_update_viewed_date(bool value) {
      _have_update_viewed_date_ = true;
      update_viewed_date_ = value;
    }

    /**
     * Clears the '<code>projection</code>' attribute so it is no longer set.
     */
    void clear_projection() {
      _have_projection_ = false;
      client::ClearCppValueHelper(&projection_);
    }


    /**
     * Gets the optional '<code>projection</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_projection() const { return projection_; }

    /**
     * Gets a modifiable pointer to the optional <code>projection</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_projection() {
      _have_projection_ = true;
      return &projection_;
    }


    /**
     * Sets the '<code>projection</code>' attribute.
     *
     * @param[in] value This parameter is deprecated and has no function.
     */
    void set_projection(const string& value) {
      _have_projection_ = true;
      projection_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Channel* data) {
    return DriveServiceBaseRequest::ExecuteAndParseResponse(data);
  }

  /**
   * Determine if the request should use Media Download for the response.
   *
   * @return true for media download, false otherwise.
   */
  bool get_use_media_download() const   {
    return DriveServiceBaseRequest::get_use_media_download();
  }

  /**
   * Sets whether Media Download should be used for the response data.
   *
   * @param[in] use true to use media download, false otherwise.
   */
  void set_use_media_download(bool use) {
    DriveServiceBaseRequest::set_use_media_download(use);
  }

 private:
  string file_id_;
  bool acknowledge_abuse_;
  bool update_viewed_date_;
  string projection_;
  bool _have_acknowledge_abuse_ : 1;
  bool _have_update_viewed_date_ : 1;
  bool _have_projection_ : 1;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(FilesResource_WatchMethod);
};



/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.file
 */
class ParentsResource_DeleteMethod : public DriveServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] file_id The ID of the file.
   *
   * @param[in] parent_id The ID of the parent.
   *
   */
  ParentsResource_DeleteMethod(
        const DriveService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& file_id,
        const StringPiece& parent_id);

  /**
   * Standard destructor.
   */
  virtual ~ParentsResource_DeleteMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


 private:
  string file_id_;
  string parent_id_;
  DISALLOW_COPY_AND_ASSIGN(ParentsResource_DeleteMethod);
};

/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.appdata
 * https://www.googleapis.com/auth/drive.file
 * https://www.googleapis.com/auth/drive.metadata.readonly
 * https://www.googleapis.com/auth/drive.readonly
 */
class ParentsResource_GetMethod : public DriveServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] file_id The ID of the file.
   *
   * @param[in] parent_id The ID of the parent.
   *
   */
  ParentsResource_GetMethod(
        const DriveService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& file_id,
        const StringPiece& parent_id);

  /**
   * Standard destructor.
   */
  virtual ~ParentsResource_GetMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      ParentReference* data) {
    return DriveServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string file_id_;
  string parent_id_;
  DISALLOW_COPY_AND_ASSIGN(ParentsResource_GetMethod);
};

/**
 * Implements the insert method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.appdata
 * https://www.googleapis.com/auth/drive.file
 */
class ParentsResource_InsertMethod : public DriveServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] file_id The ID of the file.
   *
   * @param[in] _content_ The data object to insert.
   *
   */
  ParentsResource_InsertMethod(
        const DriveService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& file_id,
        const ParentReference& _content_
    );

  /**
   * Standard destructor.
   */
  virtual ~ParentsResource_InsertMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      ParentReference* data) {
    return DriveServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string file_id_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(ParentsResource_InsertMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.appdata
 * https://www.googleapis.com/auth/drive.file
 * https://www.googleapis.com/auth/drive.metadata.readonly
 * https://www.googleapis.com/auth/drive.readonly
 */
class ParentsResource_ListMethod : public DriveServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] file_id The ID of the file.
   *
   */
  ParentsResource_ListMethod(
        const DriveService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& file_id);

  /**
   * Standard destructor.
   */
  virtual ~ParentsResource_ListMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      ParentList* data) {
    return DriveServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string file_id_;
  DISALLOW_COPY_AND_ASSIGN(ParentsResource_ListMethod);
};



/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.file
 */
class PermissionsResource_DeleteMethod : public DriveServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] file_id The ID for the file.
   *
   * @param[in] permission_id The ID for the permission.
   *
   */
  PermissionsResource_DeleteMethod(
        const DriveService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& file_id,
        const StringPiece& permission_id);

  /**
   * Standard destructor.
   */
  virtual ~PermissionsResource_DeleteMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


 private:
  string file_id_;
  string permission_id_;
  DISALLOW_COPY_AND_ASSIGN(PermissionsResource_DeleteMethod);
};

/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.file
 * https://www.googleapis.com/auth/drive.metadata.readonly
 * https://www.googleapis.com/auth/drive.readonly
 */
class PermissionsResource_GetMethod : public DriveServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] file_id The ID for the file.
   *
   * @param[in] permission_id The ID for the permission.
   *
   */
  PermissionsResource_GetMethod(
        const DriveService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& file_id,
        const StringPiece& permission_id);

  /**
   * Standard destructor.
   */
  virtual ~PermissionsResource_GetMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Permission* data) {
    return DriveServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string file_id_;
  string permission_id_;
  DISALLOW_COPY_AND_ASSIGN(PermissionsResource_GetMethod);
};

/**
 * Implements the getIdForEmail method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.appdata
 * https://www.googleapis.com/auth/drive.apps.readonly
 * https://www.googleapis.com/auth/drive.file
 * https://www.googleapis.com/auth/drive.metadata.readonly
 * https://www.googleapis.com/auth/drive.readonly
 */
class PermissionsResource_GetIdForEmailMethod : public DriveServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] email The email address for which to return a permission ID.
   *
   */
  PermissionsResource_GetIdForEmailMethod(
        const DriveService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& email);

  /**
   * Standard destructor.
   */
  virtual ~PermissionsResource_GetIdForEmailMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      PermissionId* data) {
    return DriveServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string email_;
  DISALLOW_COPY_AND_ASSIGN(PermissionsResource_GetIdForEmailMethod);
};

/**
 * Implements the insert method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.file
 */
class PermissionsResource_InsertMethod : public DriveServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] file_id The ID for the file.
   *
   * @param[in] _content_ The data object to insert.
   *
   */
  PermissionsResource_InsertMethod(
        const DriveService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& file_id,
        const Permission& _content_
    );

  /**
   * Standard destructor.
   */
  virtual ~PermissionsResource_InsertMethod();


    /**
     * Clears the '<code>emailMessage</code>' attribute so it is no longer set.
     */
    void clear_email_message() {
      _have_email_message_ = false;
      client::ClearCppValueHelper(&email_message_);
    }
    /**
     * @deprecated
     * @see clear_email_message
     */
    void clear_emailMessage() {
      clear_email_message();
    }

    /**
     * Gets the optional '<code>emailMessage</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_email_message() const { return email_message_; }

    /**
     * Gets a modifiable pointer to the optional <code>emailMessage</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_emailMessage() {
      _have_email_message_ = true;
      return &email_message_;
    }


    /**
     * Sets the '<code>emailMessage</code>' attribute.
     *
     * @param[in] value A custom message to include in notification emails.
     */
    void set_email_message(const string& value) {
      _have_email_message_ = true;
      email_message_ = value;
    }



    /**
     * Clears the '<code>sendNotificationEmails</code>' attribute so it is no
     * longer set.
     */
    void clear_send_notification_emails() {
      _have_send_notification_emails_ = false;
      client::ClearCppValueHelper(&send_notification_emails_);
    }
    /**
     * @deprecated
     * @see clear_send_notification_emails
     */
    void clear_sendNotificationEmails() {
      clear_send_notification_emails();
    }

    /**
     * Gets the optional '<code>sendNotificationEmails</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_send_notification_emails() const { return send_notification_emails_; }

    /**
     * Sets the '<code>sendNotificationEmails</code>' attribute.
     *
     * @param[in] value Whether to send notification emails when sharing to
     * users or groups. This parameter is ignored and an email is sent if the
     * role is owner.
     */
    void set_send_notification_emails(bool value) {
      _have_send_notification_emails_ = true;
      send_notification_emails_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Permission* data) {
    return DriveServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string file_id_;
  string email_message_;
  bool send_notification_emails_;
  bool _have_email_message_ : 1;
  bool _have_send_notification_emails_ : 1;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(PermissionsResource_InsertMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.file
 * https://www.googleapis.com/auth/drive.metadata.readonly
 * https://www.googleapis.com/auth/drive.readonly
 */
class PermissionsResource_ListMethod : public DriveServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] file_id The ID for the file.
   *
   */
  PermissionsResource_ListMethod(
        const DriveService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& file_id);

  /**
   * Standard destructor.
   */
  virtual ~PermissionsResource_ListMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      PermissionList* data) {
    return DriveServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string file_id_;
  DISALLOW_COPY_AND_ASSIGN(PermissionsResource_ListMethod);
};

/**
 * Implements the patch method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.file
 */
class PermissionsResource_PatchMethod : public DriveServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] file_id The ID for the file.
   *
   * @param[in] permission_id The ID for the permission.
   *
   * @param[in] _content_ The data object to patch.
   *
   */
  PermissionsResource_PatchMethod(
        const DriveService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& file_id,
        const StringPiece& permission_id,
        const Permission& _content_
    );

  /**
   * Standard destructor.
   */
  virtual ~PermissionsResource_PatchMethod();


    /**
     * Clears the '<code>transferOwnership</code>' attribute so it is no longer
     * set.
     */
    void clear_transfer_ownership() {
      _have_transfer_ownership_ = false;
      client::ClearCppValueHelper(&transfer_ownership_);
    }
    /**
     * @deprecated
     * @see clear_transfer_ownership
     */
    void clear_transferOwnership() {
      clear_transfer_ownership();
    }

    /**
     * Gets the optional '<code>transferOwnership</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_transfer_ownership() const { return transfer_ownership_; }

    /**
     * Sets the '<code>transferOwnership</code>' attribute.
     *
     * @param[in] value Whether changing a role to 'owner' should also downgrade
     * the current owners to writers.
     */
    void set_transfer_ownership(bool value) {
      _have_transfer_ownership_ = true;
      transfer_ownership_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Permission* data) {
    return DriveServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string file_id_;
  string permission_id_;
  bool transfer_ownership_;
  bool _have_transfer_ownership_ : 1;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(PermissionsResource_PatchMethod);
};

/**
 * Implements the update method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.file
 */
class PermissionsResource_UpdateMethod : public DriveServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] file_id The ID for the file.
   *
   * @param[in] permission_id The ID for the permission.
   *
   * @param[in] _content_ The data object to update.
   *
   */
  PermissionsResource_UpdateMethod(
        const DriveService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& file_id,
        const StringPiece& permission_id,
        const Permission& _content_
    );

  /**
   * Standard destructor.
   */
  virtual ~PermissionsResource_UpdateMethod();


    /**
     * Clears the '<code>transferOwnership</code>' attribute so it is no longer
     * set.
     */
    void clear_transfer_ownership() {
      _have_transfer_ownership_ = false;
      client::ClearCppValueHelper(&transfer_ownership_);
    }
    /**
     * @deprecated
     * @see clear_transfer_ownership
     */
    void clear_transferOwnership() {
      clear_transfer_ownership();
    }

    /**
     * Gets the optional '<code>transferOwnership</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_transfer_ownership() const { return transfer_ownership_; }

    /**
     * Sets the '<code>transferOwnership</code>' attribute.
     *
     * @param[in] value Whether changing a role to 'owner' should also downgrade
     * the current owners to writers.
     */
    void set_transfer_ownership(bool value) {
      _have_transfer_ownership_ = true;
      transfer_ownership_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Permission* data) {
    return DriveServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string file_id_;
  string permission_id_;
  bool transfer_ownership_;
  bool _have_transfer_ownership_ : 1;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(PermissionsResource_UpdateMethod);
};



/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.appdata
 * https://www.googleapis.com/auth/drive.file
 */
class PropertiesResource_DeleteMethod : public DriveServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] file_id The ID of the file.
   *
   * @param[in] property_key The key of the property.
   *
   */
  PropertiesResource_DeleteMethod(
        const DriveService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& file_id,
        const StringPiece& property_key);

  /**
   * Standard destructor.
   */
  virtual ~PropertiesResource_DeleteMethod();


    /**
     * Clears the '<code>visibility</code>' attribute so it is no longer set.
     */
    void clear_visibility() {
      _have_visibility_ = false;
      client::ClearCppValueHelper(&visibility_);
    }


    /**
     * Gets the optional '<code>visibility</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_visibility() const { return visibility_; }

    /**
     * Gets a modifiable pointer to the optional <code>visibility</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_visibility() {
      _have_visibility_ = true;
      return &visibility_;
    }


    /**
     * Sets the '<code>visibility</code>' attribute.
     *
     * @param[in] value The visibility of the property.
     */
    void set_visibility(const string& value) {
      _have_visibility_ = true;
      visibility_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


 private:
  string file_id_;
  string property_key_;
  string visibility_;
  bool _have_visibility_ : 1;
  DISALLOW_COPY_AND_ASSIGN(PropertiesResource_DeleteMethod);
};

/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.appdata
 * https://www.googleapis.com/auth/drive.file
 * https://www.googleapis.com/auth/drive.metadata.readonly
 * https://www.googleapis.com/auth/drive.readonly
 */
class PropertiesResource_GetMethod : public DriveServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] file_id The ID of the file.
   *
   * @param[in] property_key The key of the property.
   *
   */
  PropertiesResource_GetMethod(
        const DriveService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& file_id,
        const StringPiece& property_key);

  /**
   * Standard destructor.
   */
  virtual ~PropertiesResource_GetMethod();


    /**
     * Clears the '<code>visibility</code>' attribute so it is no longer set.
     */
    void clear_visibility() {
      _have_visibility_ = false;
      client::ClearCppValueHelper(&visibility_);
    }


    /**
     * Gets the optional '<code>visibility</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_visibility() const { return visibility_; }

    /**
     * Gets a modifiable pointer to the optional <code>visibility</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_visibility() {
      _have_visibility_ = true;
      return &visibility_;
    }


    /**
     * Sets the '<code>visibility</code>' attribute.
     *
     * @param[in] value The visibility of the property.
     */
    void set_visibility(const string& value) {
      _have_visibility_ = true;
      visibility_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Property* data) {
    return DriveServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string file_id_;
  string property_key_;
  string visibility_;
  bool _have_visibility_ : 1;
  DISALLOW_COPY_AND_ASSIGN(PropertiesResource_GetMethod);
};

/**
 * Implements the insert method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.appdata
 * https://www.googleapis.com/auth/drive.file
 */
class PropertiesResource_InsertMethod : public DriveServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] file_id The ID of the file.
   *
   * @param[in] _content_ The data object to insert.
   *
   */
  PropertiesResource_InsertMethod(
        const DriveService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& file_id,
        const Property& _content_
    );

  /**
   * Standard destructor.
   */
  virtual ~PropertiesResource_InsertMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Property* data) {
    return DriveServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string file_id_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(PropertiesResource_InsertMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.appdata
 * https://www.googleapis.com/auth/drive.file
 * https://www.googleapis.com/auth/drive.metadata.readonly
 * https://www.googleapis.com/auth/drive.readonly
 */
class PropertiesResource_ListMethod : public DriveServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] file_id The ID of the file.
   *
   */
  PropertiesResource_ListMethod(
        const DriveService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& file_id);

  /**
   * Standard destructor.
   */
  virtual ~PropertiesResource_ListMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      PropertyList* data) {
    return DriveServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string file_id_;
  DISALLOW_COPY_AND_ASSIGN(PropertiesResource_ListMethod);
};

/**
 * Implements the patch method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.appdata
 * https://www.googleapis.com/auth/drive.file
 */
class PropertiesResource_PatchMethod : public DriveServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] file_id The ID of the file.
   *
   * @param[in] property_key The key of the property.
   *
   * @param[in] _content_ The data object to patch.
   *
   */
  PropertiesResource_PatchMethod(
        const DriveService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& file_id,
        const StringPiece& property_key,
        const Property& _content_
    );

  /**
   * Standard destructor.
   */
  virtual ~PropertiesResource_PatchMethod();


    /**
     * Clears the '<code>visibility</code>' attribute so it is no longer set.
     */
    void clear_visibility() {
      _have_visibility_ = false;
      client::ClearCppValueHelper(&visibility_);
    }


    /**
     * Gets the optional '<code>visibility</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_visibility() const { return visibility_; }

    /**
     * Gets a modifiable pointer to the optional <code>visibility</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_visibility() {
      _have_visibility_ = true;
      return &visibility_;
    }


    /**
     * Sets the '<code>visibility</code>' attribute.
     *
     * @param[in] value The visibility of the property.
     */
    void set_visibility(const string& value) {
      _have_visibility_ = true;
      visibility_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Property* data) {
    return DriveServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string file_id_;
  string property_key_;
  string visibility_;
  bool _have_visibility_ : 1;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(PropertiesResource_PatchMethod);
};

/**
 * Implements the update method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.appdata
 * https://www.googleapis.com/auth/drive.file
 */
class PropertiesResource_UpdateMethod : public DriveServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] file_id The ID of the file.
   *
   * @param[in] property_key The key of the property.
   *
   * @param[in] _content_ The data object to update.
   *
   */
  PropertiesResource_UpdateMethod(
        const DriveService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& file_id,
        const StringPiece& property_key,
        const Property& _content_
    );

  /**
   * Standard destructor.
   */
  virtual ~PropertiesResource_UpdateMethod();


    /**
     * Clears the '<code>visibility</code>' attribute so it is no longer set.
     */
    void clear_visibility() {
      _have_visibility_ = false;
      client::ClearCppValueHelper(&visibility_);
    }


    /**
     * Gets the optional '<code>visibility</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_visibility() const { return visibility_; }

    /**
     * Gets a modifiable pointer to the optional <code>visibility</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_visibility() {
      _have_visibility_ = true;
      return &visibility_;
    }


    /**
     * Sets the '<code>visibility</code>' attribute.
     *
     * @param[in] value The visibility of the property.
     */
    void set_visibility(const string& value) {
      _have_visibility_ = true;
      visibility_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Property* data) {
    return DriveServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string file_id_;
  string property_key_;
  string visibility_;
  bool _have_visibility_ : 1;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(PropertiesResource_UpdateMethod);
};



/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.file
 * https://www.googleapis.com/auth/drive.readonly
 */
class RealtimeResource_GetMethod : public DriveServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] file_id The ID of the file that the Realtime API data model is
   * associated with.
   *
   */
  RealtimeResource_GetMethod(
        const DriveService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& file_id);

  /**
   * Standard destructor.
   */
  virtual ~RealtimeResource_GetMethod();


    /**
     * Clears the '<code>revision</code>' attribute so it is no longer set.
     */
    void clear_revision() {
      _have_revision_ = false;
      client::ClearCppValueHelper(&revision_);
    }


    /**
     * Gets the optional '<code>revision</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_revision() const { return revision_; }

    /**
     * Sets the '<code>revision</code>' attribute.
     *
     * @param[in] value The revision of the Realtime API data model to export.
     * Revisions start at 1 (the initial empty data model) and are incremented
     * with each change. If this parameter is excluded, the most recent data
     * model will be returned.
     */
    void set_revision(int32 value) {
      _have_revision_ = true;
      revision_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Determine if the request should use Media Download for the response.
   *
   * @return true for media download, false otherwise.
   */
  bool get_use_media_download() const   {
    return DriveServiceBaseRequest::get_use_media_download();
  }

  /**
   * Sets whether Media Download should be used for the response data.
   *
   * @param[in] use true to use media download, false otherwise.
   */
  void set_use_media_download(bool use) {
    DriveServiceBaseRequest::set_use_media_download(use);
  }

 private:
  string file_id_;
  int32 revision_;
  bool _have_revision_ : 1;
  DISALLOW_COPY_AND_ASSIGN(RealtimeResource_GetMethod);
};

/**
 * Implements the update method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.file
 */
class RealtimeResource_UpdateMethod : public DriveServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] file_id The ID of the file that the Realtime API data model is
   * associated with.
   *
   * @param[in] _media_content_type_ The content type of the data in the
   * _media_content_reader_.
   * @param[in] _media_content_reader_ The media content to update. If
   * this is NULL then do not upload any media and ignore _media_content_type_.
   */
  RealtimeResource_UpdateMethod(
        const DriveService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& file_id,
        const StringPiece& _media_content_type_,
        client::DataReader* _media_content_reader_);

  /**
   * Standard destructor.
   */
  virtual ~RealtimeResource_UpdateMethod();


    /**
     * Clears the '<code>baseRevision</code>' attribute so it is no longer set.
     */
    void clear_base_revision() {
      _have_base_revision_ = false;
      client::ClearCppValueHelper(&base_revision_);
    }
    /**
     * @deprecated
     * @see clear_base_revision
     */
    void clear_baseRevision() {
      clear_base_revision();
    }

    /**
     * Gets the optional '<code>baseRevision</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_base_revision() const { return base_revision_; }

    /**
     * Gets a modifiable pointer to the optional <code>baseRevision</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_baseRevision() {
      _have_base_revision_ = true;
      return &base_revision_;
    }


    /**
     * Sets the '<code>baseRevision</code>' attribute.
     *
     * @param[in] value The revision of the model to diff the uploaded model
     * against. If set, the uploaded model is diffed against the provided
     * revision and those differences are merged with any changes made to the
     * model after the provided revision. If not set, the uploaded model
     * replaces the current model on the server.
     */
    void set_base_revision(const string& value) {
      _have_base_revision_ = true;
      base_revision_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Invokes the server with the method.
   *
   * Response detail is available from the underlying http_request.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  virtual util::Status Execute();

  /**
   * Returns MediaUploader for uploading the content.
   */
  client::MediaUploader* media_uploader() {
    return _uploader_.get();
  }

  /**
   * Returns the specification for media upload using the simple protocol.
   */
  static const client::MediaUploadSpec
    SIMPLE_MEDIA_UPLOAD;
  /**
   * Returns the specification for media upload using the resumable protocol.
   */
  static const client::MediaUploadSpec
    RESUMABLE_MEDIA_UPLOAD;

 private:
  string file_id_;
  string base_revision_;
  bool _have_base_revision_ : 1;
  scoped_ptr<client::MediaUploader> _uploader_;

  DISALLOW_COPY_AND_ASSIGN(RealtimeResource_UpdateMethod);
};



/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.file
 */
class RepliesResource_DeleteMethod : public DriveServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] file_id The ID of the file.
   *
   * @param[in] comment_id The ID of the comment.
   *
   * @param[in] reply_id The ID of the reply.
   *
   */
  RepliesResource_DeleteMethod(
        const DriveService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& file_id,
        const StringPiece& comment_id,
        const StringPiece& reply_id);

  /**
   * Standard destructor.
   */
  virtual ~RepliesResource_DeleteMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


 private:
  string file_id_;
  string comment_id_;
  string reply_id_;
  DISALLOW_COPY_AND_ASSIGN(RepliesResource_DeleteMethod);
};

/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.file
 * https://www.googleapis.com/auth/drive.readonly
 */
class RepliesResource_GetMethod : public DriveServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] file_id The ID of the file.
   *
   * @param[in] comment_id The ID of the comment.
   *
   * @param[in] reply_id The ID of the reply.
   *
   */
  RepliesResource_GetMethod(
        const DriveService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& file_id,
        const StringPiece& comment_id,
        const StringPiece& reply_id);

  /**
   * Standard destructor.
   */
  virtual ~RepliesResource_GetMethod();


    /**
     * Clears the '<code>includeDeleted</code>' attribute so it is no longer
     * set.
     */
    void clear_include_deleted() {
      _have_include_deleted_ = false;
      client::ClearCppValueHelper(&include_deleted_);
    }
    /**
     * @deprecated
     * @see clear_include_deleted
     */
    void clear_includeDeleted() {
      clear_include_deleted();
    }

    /**
     * Gets the optional '<code>includeDeleted</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_include_deleted() const { return include_deleted_; }

    /**
     * Sets the '<code>includeDeleted</code>' attribute.
     *
     * @param[in] value If set, this will succeed when retrieving a deleted
     * reply.
     */
    void set_include_deleted(bool value) {
      _have_include_deleted_ = true;
      include_deleted_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      CommentReply* data) {
    return DriveServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string file_id_;
  string comment_id_;
  string reply_id_;
  bool include_deleted_;
  bool _have_include_deleted_ : 1;
  DISALLOW_COPY_AND_ASSIGN(RepliesResource_GetMethod);
};

/**
 * Implements the insert method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.file
 */
class RepliesResource_InsertMethod : public DriveServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] file_id The ID of the file.
   *
   * @param[in] comment_id The ID of the comment.
   *
   * @param[in] _content_ The data object to insert.
   *
   */
  RepliesResource_InsertMethod(
        const DriveService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& file_id,
        const StringPiece& comment_id,
        const CommentReply& _content_
    );

  /**
   * Standard destructor.
   */
  virtual ~RepliesResource_InsertMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      CommentReply* data) {
    return DriveServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string file_id_;
  string comment_id_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(RepliesResource_InsertMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.file
 * https://www.googleapis.com/auth/drive.readonly
 */
class RepliesResource_ListMethod : public DriveServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] file_id The ID of the file.
   *
   * @param[in] comment_id The ID of the comment.
   *
   */
  RepliesResource_ListMethod(
        const DriveService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& file_id,
        const StringPiece& comment_id);

  /**
   * Standard destructor.
   */
  virtual ~RepliesResource_ListMethod();


    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }
    /**
     * @deprecated
     * @see clear_page_token
     */
    void clear_pageToken() {
      clear_page_token();
    }

    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value The continuation token, used to page through large
     * result sets. To get the next page of results, set this parameter to the
     * value of "nextPageToken" from the previous response.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }



    /**
     * Clears the '<code>includeDeleted</code>' attribute so it is no longer
     * set.
     */
    void clear_include_deleted() {
      _have_include_deleted_ = false;
      client::ClearCppValueHelper(&include_deleted_);
    }
    /**
     * @deprecated
     * @see clear_include_deleted
     */
    void clear_includeDeleted() {
      clear_include_deleted();
    }

    /**
     * Gets the optional '<code>includeDeleted</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_include_deleted() const { return include_deleted_; }

    /**
     * Sets the '<code>includeDeleted</code>' attribute.
     *
     * @param[in] value If set, all replies, including deleted replies (with
     * content stripped) will be returned.
     */
    void set_include_deleted(bool value) {
      _have_include_deleted_ = true;
      include_deleted_ = value;
    }

    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }
    /**
     * @deprecated
     * @see clear_max_results
     */
    void clear_maxResults() {
      clear_max_results();
    }

    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value The maximum number of replies to include in the
     * response, used for paging.
     */
    void set_max_results(int32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      CommentReplyList* data) {
    return DriveServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string file_id_;
  string comment_id_;
  string page_token_;
  bool include_deleted_;
  int32 max_results_;
  bool _have_page_token_ : 1;
  bool _have_include_deleted_ : 1;
  bool _have_max_results_ : 1;
  DISALLOW_COPY_AND_ASSIGN(RepliesResource_ListMethod);
};

typedef client::ServiceRequestPager<
            RepliesResource_ListMethod,
            CommentReplyList>
        RepliesResource_ListMethodPager;

/**
 * Implements the patch method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.file
 */
class RepliesResource_PatchMethod : public DriveServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] file_id The ID of the file.
   *
   * @param[in] comment_id The ID of the comment.
   *
   * @param[in] reply_id The ID of the reply.
   *
   * @param[in] _content_ The data object to patch.
   *
   */
  RepliesResource_PatchMethod(
        const DriveService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& file_id,
        const StringPiece& comment_id,
        const StringPiece& reply_id,
        const CommentReply& _content_
    );

  /**
   * Standard destructor.
   */
  virtual ~RepliesResource_PatchMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      CommentReply* data) {
    return DriveServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string file_id_;
  string comment_id_;
  string reply_id_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(RepliesResource_PatchMethod);
};

/**
 * Implements the update method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.file
 */
class RepliesResource_UpdateMethod : public DriveServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] file_id The ID of the file.
   *
   * @param[in] comment_id The ID of the comment.
   *
   * @param[in] reply_id The ID of the reply.
   *
   * @param[in] _content_ The data object to update.
   *
   */
  RepliesResource_UpdateMethod(
        const DriveService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& file_id,
        const StringPiece& comment_id,
        const StringPiece& reply_id,
        const CommentReply& _content_
    );

  /**
   * Standard destructor.
   */
  virtual ~RepliesResource_UpdateMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      CommentReply* data) {
    return DriveServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string file_id_;
  string comment_id_;
  string reply_id_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(RepliesResource_UpdateMethod);
};



/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.appdata
 * https://www.googleapis.com/auth/drive.file
 */
class RevisionsResource_DeleteMethod : public DriveServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] file_id The ID of the file.
   *
   * @param[in] revision_id The ID of the revision.
   *
   */
  RevisionsResource_DeleteMethod(
        const DriveService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& file_id,
        const StringPiece& revision_id);

  /**
   * Standard destructor.
   */
  virtual ~RevisionsResource_DeleteMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


 private:
  string file_id_;
  string revision_id_;
  DISALLOW_COPY_AND_ASSIGN(RevisionsResource_DeleteMethod);
};

/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.appdata
 * https://www.googleapis.com/auth/drive.file
 * https://www.googleapis.com/auth/drive.metadata.readonly
 * https://www.googleapis.com/auth/drive.readonly
 */
class RevisionsResource_GetMethod : public DriveServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] file_id The ID of the file.
   *
   * @param[in] revision_id The ID of the revision.
   *
   */
  RevisionsResource_GetMethod(
        const DriveService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& file_id,
        const StringPiece& revision_id);

  /**
   * Standard destructor.
   */
  virtual ~RevisionsResource_GetMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Revision* data) {
    return DriveServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string file_id_;
  string revision_id_;
  DISALLOW_COPY_AND_ASSIGN(RevisionsResource_GetMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.appdata
 * https://www.googleapis.com/auth/drive.file
 * https://www.googleapis.com/auth/drive.metadata.readonly
 * https://www.googleapis.com/auth/drive.readonly
 */
class RevisionsResource_ListMethod : public DriveServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] file_id The ID of the file.
   *
   */
  RevisionsResource_ListMethod(
        const DriveService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& file_id);

  /**
   * Standard destructor.
   */
  virtual ~RevisionsResource_ListMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      RevisionList* data) {
    return DriveServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string file_id_;
  DISALLOW_COPY_AND_ASSIGN(RevisionsResource_ListMethod);
};

/**
 * Implements the patch method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.appdata
 * https://www.googleapis.com/auth/drive.file
 */
class RevisionsResource_PatchMethod : public DriveServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] file_id The ID for the file.
   *
   * @param[in] revision_id The ID for the revision.
   *
   * @param[in] _content_ The data object to patch.
   *
   */
  RevisionsResource_PatchMethod(
        const DriveService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& file_id,
        const StringPiece& revision_id,
        const Revision& _content_
    );

  /**
   * Standard destructor.
   */
  virtual ~RevisionsResource_PatchMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Revision* data) {
    return DriveServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string file_id_;
  string revision_id_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(RevisionsResource_PatchMethod);
};

/**
 * Implements the update method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.appdata
 * https://www.googleapis.com/auth/drive.file
 */
class RevisionsResource_UpdateMethod : public DriveServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] file_id The ID for the file.
   *
   * @param[in] revision_id The ID for the revision.
   *
   * @param[in] _content_ The data object to update.
   *
   */
  RevisionsResource_UpdateMethod(
        const DriveService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& file_id,
        const StringPiece& revision_id,
        const Revision& _content_
    );

  /**
   * Standard destructor.
   */
  virtual ~RevisionsResource_UpdateMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Revision* data) {
    return DriveServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string file_id_;
  string revision_id_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(RevisionsResource_UpdateMethod);
};



/**
 * Service definition for DriveService (v2).
 *
 * @ingroup ServiceClass
 *
 * For more information about this service, see the API Documentation at
 * <a href='https://developers.google.com/drive/'>'https://developers.google.com/drive/</a>
 */
class DriveService : public client::ClientService {
 public:
   /**
    * The name of the API that this was generated from.
    */
   static const StringPiece googleapis_API_NAME;

   /**
    * The version of the API that this interface was generated from.
    */
   static const StringPiece googleapis_API_VERSION;

   /**
    * The code generator used to generate this API.
    */
   static const StringPiece googleapis_API_GENERATOR;


    /**
     * Acts as message factory for accessing  data.
     *
     * @ingroup ServiceClass
     */
    class AboutResource {
     public:
      /**
       * Standard constructor.
       *
       * @param[in] service  The service instance is used to bind to the
       *            methods created from this resource instance.  This will be
       *            the service that methods are invoked on.
       */
      AboutResource(DriveService* service);

      /**
       * Standard destructor.
       */
      ~AboutResource() {}


      /**
       * Creates a new AboutResource_GetMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      AboutResource_GetMethod* NewGetMethod(
          client::AuthorizationCredential* _credential_) const;

     private:
      DriveService* service_;

      DISALLOW_COPY_AND_ASSIGN(AboutResource);
    };

    /**
     * Acts as message factory for accessing  data.
     *
     * @ingroup ServiceClass
     */
    class AppsResource {
     public:
      /**
       * Standard constructor.
       *
       * @param[in] service  The service instance is used to bind to the
       *            methods created from this resource instance.  This will be
       *            the service that methods are invoked on.
       */
      AppsResource(DriveService* service);

      /**
       * Standard destructor.
       */
      ~AppsResource() {}


      /**
       * Creates a new AppsResource_GetMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] app_id The ID of the app.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      AppsResource_GetMethod* NewGetMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& app_id) const;

      /**
       * Creates a new AppsResource_ListMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      AppsResource_ListMethod* NewListMethod(
          client::AuthorizationCredential* _credential_) const;

     private:
      DriveService* service_;

      DISALLOW_COPY_AND_ASSIGN(AppsResource);
    };

    /**
     * Acts as message factory for accessing  data.
     *
     * @ingroup ServiceClass
     */
    class ChangesResource {
     public:
      /**
       * Standard constructor.
       *
       * @param[in] service  The service instance is used to bind to the
       *            methods created from this resource instance.  This will be
       *            the service that methods are invoked on.
       */
      ChangesResource(DriveService* service);

      /**
       * Standard destructor.
       */
      ~ChangesResource() {}


      /**
       * Creates a new ChangesResource_GetMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] change_id The ID of the change.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ChangesResource_GetMethod* NewGetMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& change_id) const;

      /**
       * Creates a new ChangesResource_ListMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ChangesResource_ListMethod* NewListMethod(
          client::AuthorizationCredential* _credential_) const;

      /**
       * Creates a pager for iterating over incremental result pages.
       * @param[in] _credential_  NULL credentials will not authorize the
       * request.
       *
       * @see googleapis::googleapis::ServiceRequestPager
       */
      ChangesResource_ListMethodPager* NewListMethodPager(
          client::AuthorizationCredential* _credential_) const;

      /**
       * Creates a new ChangesResource_WatchMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] _content_ The data object to watch.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ChangesResource_WatchMethod* NewWatchMethod(
          client::AuthorizationCredential* _credential_,
          const Channel& _content_) const;

     private:
      DriveService* service_;

      DISALLOW_COPY_AND_ASSIGN(ChangesResource);
    };

    /**
     * Acts as message factory for accessing  data.
     *
     * @ingroup ServiceClass
     */
    class ChannelsResource {
     public:
      /**
       * Standard constructor.
       *
       * @param[in] service  The service instance is used to bind to the
       *            methods created from this resource instance.  This will be
       *            the service that methods are invoked on.
       */
      ChannelsResource(DriveService* service);

      /**
       * Standard destructor.
       */
      ~ChannelsResource() {}


      /**
       * Creates a new ChannelsResource_StopMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] _content_ The data object to stop.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ChannelsResource_StopMethod* NewStopMethod(
          client::AuthorizationCredential* _credential_,
          const Channel& _content_) const;

     private:
      DriveService* service_;

      DISALLOW_COPY_AND_ASSIGN(ChannelsResource);
    };

    /**
     * Acts as message factory for accessing  data.
     *
     * @ingroup ServiceClass
     */
    class ChildrenResource {
     public:
      /**
       * Standard constructor.
       *
       * @param[in] service  The service instance is used to bind to the
       *            methods created from this resource instance.  This will be
       *            the service that methods are invoked on.
       */
      ChildrenResource(DriveService* service);

      /**
       * Standard destructor.
       */
      ~ChildrenResource() {}


      /**
       * Creates a new ChildrenResource_DeleteMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] folder_id The ID of the folder.
       * @param[in] child_id The ID of the child.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ChildrenResource_DeleteMethod* NewDeleteMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& folder_id,
          const StringPiece& child_id) const;

      /**
       * Creates a new ChildrenResource_GetMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] folder_id The ID of the folder.
       * @param[in] child_id The ID of the child.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ChildrenResource_GetMethod* NewGetMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& folder_id,
          const StringPiece& child_id) const;

      /**
       * Creates a new ChildrenResource_InsertMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] folder_id The ID of the folder.
       * @param[in] _content_ The data object to insert.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ChildrenResource_InsertMethod* NewInsertMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& folder_id,
          const ChildReference& _content_) const;

      /**
       * Creates a new ChildrenResource_ListMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] folder_id The ID of the folder.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ChildrenResource_ListMethod* NewListMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& folder_id) const;

      /**
       * Creates a pager for iterating over incremental result pages.
       * @param[in] _credential_  NULL credentials will not authorize the
       * request.
       * @param[in] folder_id The ID of the folder.
       *
       *
       * @see googleapis::googleapis::ServiceRequestPager
       */
      ChildrenResource_ListMethodPager* NewListMethodPager(
          client::AuthorizationCredential* _credential_,
          const StringPiece& folder_id) const;

     private:
      DriveService* service_;

      DISALLOW_COPY_AND_ASSIGN(ChildrenResource);
    };

    /**
     * Acts as message factory for accessing  data.
     *
     * @ingroup ServiceClass
     */
    class CommentsResource {
     public:
      /**
       * Standard constructor.
       *
       * @param[in] service  The service instance is used to bind to the
       *            methods created from this resource instance.  This will be
       *            the service that methods are invoked on.
       */
      CommentsResource(DriveService* service);

      /**
       * Standard destructor.
       */
      ~CommentsResource() {}


      /**
       * Creates a new CommentsResource_DeleteMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] file_id The ID of the file.
       * @param[in] comment_id The ID of the comment.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      CommentsResource_DeleteMethod* NewDeleteMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& file_id,
          const StringPiece& comment_id) const;

      /**
       * Creates a new CommentsResource_GetMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] file_id The ID of the file.
       * @param[in] comment_id The ID of the comment.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      CommentsResource_GetMethod* NewGetMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& file_id,
          const StringPiece& comment_id) const;

      /**
       * Creates a new CommentsResource_InsertMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] file_id The ID of the file.
       * @param[in] _content_ The data object to insert.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      CommentsResource_InsertMethod* NewInsertMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& file_id,
          const Comment& _content_) const;

      /**
       * Creates a new CommentsResource_ListMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] file_id The ID of the file.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      CommentsResource_ListMethod* NewListMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& file_id) const;

      /**
       * Creates a pager for iterating over incremental result pages.
       * @param[in] _credential_  NULL credentials will not authorize the
       * request.
       * @param[in] file_id The ID of the file.
       *
       *
       * @see googleapis::googleapis::ServiceRequestPager
       */
      CommentsResource_ListMethodPager* NewListMethodPager(
          client::AuthorizationCredential* _credential_,
          const StringPiece& file_id) const;

      /**
       * Creates a new CommentsResource_PatchMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] file_id The ID of the file.
       * @param[in] comment_id The ID of the comment.
       * @param[in] _content_ The data object to patch.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      CommentsResource_PatchMethod* NewPatchMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& file_id,
          const StringPiece& comment_id,
          const Comment& _content_) const;

      /**
       * Creates a new CommentsResource_UpdateMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] file_id The ID of the file.
       * @param[in] comment_id The ID of the comment.
       * @param[in] _content_ The data object to update.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      CommentsResource_UpdateMethod* NewUpdateMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& file_id,
          const StringPiece& comment_id,
          const Comment& _content_) const;

     private:
      DriveService* service_;

      DISALLOW_COPY_AND_ASSIGN(CommentsResource);
    };

    /**
     * Acts as message factory for accessing  data.
     *
     * @ingroup ServiceClass
     */
    class FilesResource {
     public:
      /**
       * Standard constructor.
       *
       * @param[in] service  The service instance is used to bind to the
       *            methods created from this resource instance.  This will be
       *            the service that methods are invoked on.
       */
      FilesResource(DriveService* service);

      /**
       * Standard destructor.
       */
      ~FilesResource() {}


      /**
       * Creates a new FilesResource_CopyMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] file_id The ID of the file to copy.
       * @param[in] _content_ The data object to copy.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      FilesResource_CopyMethod* NewCopyMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& file_id,
          const File& _content_) const;

      /**
       * Creates a new FilesResource_DeleteMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] file_id The ID of the file to delete.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      FilesResource_DeleteMethod* NewDeleteMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& file_id) const;

      /**
       * Creates a new FilesResource_EmptyTrashMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      FilesResource_EmptyTrashMethod* NewEmptyTrashMethod(
          client::AuthorizationCredential* _credential_) const;

      /**
       * Creates a new FilesResource_GetMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] file_id The ID for the file in question.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      FilesResource_GetMethod* NewGetMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& file_id) const;


      /**
       * Creates a new FilesResource_InsertMethod instance.
       * @deprecated
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      FilesResource_InsertMethod* NewInsertMethod(
          client::AuthorizationCredential* _credential_) const;

      /**
       * Creates a new FilesResource_InsertMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] _metadata_ The metadata object to insert. If this is NULL
       * then do not upload any metadata.
       * @param[in] _media_content_type_ The content type of the data in the
       * _media_content_reader_.
       * @param[in] _media_content_reader_ The media content to insert. If
       * this is NULL then do not upload any media and ignore
       * _media_content_type_.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      FilesResource_InsertMethod* NewInsertMethod(
          client::AuthorizationCredential* _credential_,
          const File* _metadata_,
          const StringPiece& _media_content_type_,
          client::DataReader* _media_content_reader_
      ) const;

      /**
       * Creates a new FilesResource_ListMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      FilesResource_ListMethod* NewListMethod(
          client::AuthorizationCredential* _credential_) const;

      /**
       * Creates a pager for iterating over incremental result pages.
       * @param[in] _credential_  NULL credentials will not authorize the
       * request.
       *
       * @see googleapis::googleapis::ServiceRequestPager
       */
      FilesResource_ListMethodPager* NewListMethodPager(
          client::AuthorizationCredential* _credential_) const;

      /**
       * Creates a new FilesResource_PatchMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] file_id The ID of the file to update.
       * @param[in] _content_ The data object to patch.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      FilesResource_PatchMethod* NewPatchMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& file_id,
          const File& _content_) const;

      /**
       * Creates a new FilesResource_TouchMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] file_id The ID of the file to update.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      FilesResource_TouchMethod* NewTouchMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& file_id) const;

      /**
       * Creates a new FilesResource_TrashMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] file_id The ID of the file to trash.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      FilesResource_TrashMethod* NewTrashMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& file_id) const;

      /**
       * Creates a new FilesResource_UntrashMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] file_id The ID of the file to untrash.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      FilesResource_UntrashMethod* NewUntrashMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& file_id) const;


      /**
       * Creates a new FilesResource_UpdateMethod instance.
       * @deprecated
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] file_id The ID of the file to update.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      FilesResource_UpdateMethod* NewUpdateMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& file_id) const;

      /**
       * Creates a new FilesResource_UpdateMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] file_id The ID of the file to update.
       * @param[in] _metadata_ The metadata object to update. If this is NULL
       * then do not upload any metadata.
       * @param[in] _media_content_type_ The content type of the data in the
       * _media_content_reader_.
       * @param[in] _media_content_reader_ The media content to update. If
       * this is NULL then do not upload any media and ignore
       * _media_content_type_.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      FilesResource_UpdateMethod* NewUpdateMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& file_id,
          const File* _metadata_,
          const StringPiece& _media_content_type_,
          client::DataReader* _media_content_reader_
      ) const;

      /**
       * Creates a new FilesResource_WatchMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] file_id The ID for the file in question.
       * @param[in] _content_ The data object to watch.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      FilesResource_WatchMethod* NewWatchMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& file_id,
          const Channel& _content_) const;

     private:
      DriveService* service_;

      DISALLOW_COPY_AND_ASSIGN(FilesResource);
    };

    /**
     * Acts as message factory for accessing  data.
     *
     * @ingroup ServiceClass
     */
    class ParentsResource {
     public:
      /**
       * Standard constructor.
       *
       * @param[in] service  The service instance is used to bind to the
       *            methods created from this resource instance.  This will be
       *            the service that methods are invoked on.
       */
      ParentsResource(DriveService* service);

      /**
       * Standard destructor.
       */
      ~ParentsResource() {}


      /**
       * Creates a new ParentsResource_DeleteMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] file_id The ID of the file.
       * @param[in] parent_id The ID of the parent.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ParentsResource_DeleteMethod* NewDeleteMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& file_id,
          const StringPiece& parent_id) const;

      /**
       * Creates a new ParentsResource_GetMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] file_id The ID of the file.
       * @param[in] parent_id The ID of the parent.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ParentsResource_GetMethod* NewGetMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& file_id,
          const StringPiece& parent_id) const;

      /**
       * Creates a new ParentsResource_InsertMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] file_id The ID of the file.
       * @param[in] _content_ The data object to insert.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ParentsResource_InsertMethod* NewInsertMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& file_id,
          const ParentReference& _content_) const;

      /**
       * Creates a new ParentsResource_ListMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] file_id The ID of the file.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ParentsResource_ListMethod* NewListMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& file_id) const;

     private:
      DriveService* service_;

      DISALLOW_COPY_AND_ASSIGN(ParentsResource);
    };

    /**
     * Acts as message factory for accessing  data.
     *
     * @ingroup ServiceClass
     */
    class PermissionsResource {
     public:
      /**
       * Standard constructor.
       *
       * @param[in] service  The service instance is used to bind to the
       *            methods created from this resource instance.  This will be
       *            the service that methods are invoked on.
       */
      PermissionsResource(DriveService* service);

      /**
       * Standard destructor.
       */
      ~PermissionsResource() {}


      /**
       * Creates a new PermissionsResource_DeleteMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] file_id The ID for the file.
       * @param[in] permission_id The ID for the permission.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      PermissionsResource_DeleteMethod* NewDeleteMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& file_id,
          const StringPiece& permission_id) const;

      /**
       * Creates a new PermissionsResource_GetMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] file_id The ID for the file.
       * @param[in] permission_id The ID for the permission.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      PermissionsResource_GetMethod* NewGetMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& file_id,
          const StringPiece& permission_id) const;

      /**
       * Creates a new PermissionsResource_GetIdForEmailMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] email The email address for which to return a permission ID.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      PermissionsResource_GetIdForEmailMethod* NewGetIdForEmailMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& email) const;

      /**
       * Creates a new PermissionsResource_InsertMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] file_id The ID for the file.
       * @param[in] _content_ The data object to insert.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      PermissionsResource_InsertMethod* NewInsertMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& file_id,
          const Permission& _content_) const;

      /**
       * Creates a new PermissionsResource_ListMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] file_id The ID for the file.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      PermissionsResource_ListMethod* NewListMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& file_id) const;

      /**
       * Creates a new PermissionsResource_PatchMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] file_id The ID for the file.
       * @param[in] permission_id The ID for the permission.
       * @param[in] _content_ The data object to patch.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      PermissionsResource_PatchMethod* NewPatchMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& file_id,
          const StringPiece& permission_id,
          const Permission& _content_) const;

      /**
       * Creates a new PermissionsResource_UpdateMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] file_id The ID for the file.
       * @param[in] permission_id The ID for the permission.
       * @param[in] _content_ The data object to update.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      PermissionsResource_UpdateMethod* NewUpdateMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& file_id,
          const StringPiece& permission_id,
          const Permission& _content_) const;

     private:
      DriveService* service_;

      DISALLOW_COPY_AND_ASSIGN(PermissionsResource);
    };

    /**
     * Acts as message factory for accessing  data.
     *
     * @ingroup ServiceClass
     */
    class PropertiesResource {
     public:
      /**
       * Standard constructor.
       *
       * @param[in] service  The service instance is used to bind to the
       *            methods created from this resource instance.  This will be
       *            the service that methods are invoked on.
       */
      PropertiesResource(DriveService* service);

      /**
       * Standard destructor.
       */
      ~PropertiesResource() {}


      /**
       * Creates a new PropertiesResource_DeleteMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] file_id The ID of the file.
       * @param[in] property_key The key of the property.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      PropertiesResource_DeleteMethod* NewDeleteMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& file_id,
          const StringPiece& property_key) const;

      /**
       * Creates a new PropertiesResource_GetMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] file_id The ID of the file.
       * @param[in] property_key The key of the property.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      PropertiesResource_GetMethod* NewGetMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& file_id,
          const StringPiece& property_key) const;

      /**
       * Creates a new PropertiesResource_InsertMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] file_id The ID of the file.
       * @param[in] _content_ The data object to insert.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      PropertiesResource_InsertMethod* NewInsertMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& file_id,
          const Property& _content_) const;

      /**
       * Creates a new PropertiesResource_ListMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] file_id The ID of the file.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      PropertiesResource_ListMethod* NewListMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& file_id) const;

      /**
       * Creates a new PropertiesResource_PatchMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] file_id The ID of the file.
       * @param[in] property_key The key of the property.
       * @param[in] _content_ The data object to patch.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      PropertiesResource_PatchMethod* NewPatchMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& file_id,
          const StringPiece& property_key,
          const Property& _content_) const;

      /**
       * Creates a new PropertiesResource_UpdateMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] file_id The ID of the file.
       * @param[in] property_key The key of the property.
       * @param[in] _content_ The data object to update.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      PropertiesResource_UpdateMethod* NewUpdateMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& file_id,
          const StringPiece& property_key,
          const Property& _content_) const;

     private:
      DriveService* service_;

      DISALLOW_COPY_AND_ASSIGN(PropertiesResource);
    };

    /**
     * Acts as message factory for accessing  data.
     *
     * @ingroup ServiceClass
     */
    class RealtimeResource {
     public:
      /**
       * Standard constructor.
       *
       * @param[in] service  The service instance is used to bind to the
       *            methods created from this resource instance.  This will be
       *            the service that methods are invoked on.
       */
      RealtimeResource(DriveService* service);

      /**
       * Standard destructor.
       */
      ~RealtimeResource() {}


      /**
       * Creates a new RealtimeResource_GetMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] file_id The ID of the file that the Realtime API data model
       * is associated with.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      RealtimeResource_GetMethod* NewGetMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& file_id) const;

      /**
       * Creates a new RealtimeResource_UpdateMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] file_id The ID of the file that the Realtime API data model
       * is associated with.
       * @param[in] _media_content_type_ The content type of the data in the
       * _media_content_reader_.
       * @param[in] _media_content_reader_ The media content to update. If
       * this is NULL then do not upload any media and ignore
       * _media_content_type_.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      RealtimeResource_UpdateMethod* NewUpdateMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& file_id,
          const StringPiece& _media_content_type_,
          client::DataReader* _media_content_reader_) const;

     private:
      DriveService* service_;

      DISALLOW_COPY_AND_ASSIGN(RealtimeResource);
    };

    /**
     * Acts as message factory for accessing  data.
     *
     * @ingroup ServiceClass
     */
    class RepliesResource {
     public:
      /**
       * Standard constructor.
       *
       * @param[in] service  The service instance is used to bind to the
       *            methods created from this resource instance.  This will be
       *            the service that methods are invoked on.
       */
      RepliesResource(DriveService* service);

      /**
       * Standard destructor.
       */
      ~RepliesResource() {}


      /**
       * Creates a new RepliesResource_DeleteMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] file_id The ID of the file.
       * @param[in] comment_id The ID of the comment.
       * @param[in] reply_id The ID of the reply.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      RepliesResource_DeleteMethod* NewDeleteMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& file_id,
          const StringPiece& comment_id,
          const StringPiece& reply_id) const;

      /**
       * Creates a new RepliesResource_GetMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] file_id The ID of the file.
       * @param[in] comment_id The ID of the comment.
       * @param[in] reply_id The ID of the reply.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      RepliesResource_GetMethod* NewGetMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& file_id,
          const StringPiece& comment_id,
          const StringPiece& reply_id) const;

      /**
       * Creates a new RepliesResource_InsertMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] file_id The ID of the file.
       * @param[in] comment_id The ID of the comment.
       * @param[in] _content_ The data object to insert.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      RepliesResource_InsertMethod* NewInsertMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& file_id,
          const StringPiece& comment_id,
          const CommentReply& _content_) const;

      /**
       * Creates a new RepliesResource_ListMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] file_id The ID of the file.
       * @param[in] comment_id The ID of the comment.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      RepliesResource_ListMethod* NewListMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& file_id,
          const StringPiece& comment_id) const;

      /**
       * Creates a pager for iterating over incremental result pages.
       * @param[in] _credential_  NULL credentials will not authorize the
       * request.
       * @param[in] file_id The ID of the file.
       *
       * @param[in] comment_id The ID of the comment.
       *
       *
       * @see googleapis::googleapis::ServiceRequestPager
       */
      RepliesResource_ListMethodPager* NewListMethodPager(
          client::AuthorizationCredential* _credential_,
          const StringPiece& file_id,
          const StringPiece& comment_id) const;

      /**
       * Creates a new RepliesResource_PatchMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] file_id The ID of the file.
       * @param[in] comment_id The ID of the comment.
       * @param[in] reply_id The ID of the reply.
       * @param[in] _content_ The data object to patch.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      RepliesResource_PatchMethod* NewPatchMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& file_id,
          const StringPiece& comment_id,
          const StringPiece& reply_id,
          const CommentReply& _content_) const;

      /**
       * Creates a new RepliesResource_UpdateMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] file_id The ID of the file.
       * @param[in] comment_id The ID of the comment.
       * @param[in] reply_id The ID of the reply.
       * @param[in] _content_ The data object to update.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      RepliesResource_UpdateMethod* NewUpdateMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& file_id,
          const StringPiece& comment_id,
          const StringPiece& reply_id,
          const CommentReply& _content_) const;

     private:
      DriveService* service_;

      DISALLOW_COPY_AND_ASSIGN(RepliesResource);
    };

    /**
     * Acts as message factory for accessing  data.
     *
     * @ingroup ServiceClass
     */
    class RevisionsResource {
     public:
      /**
       * Standard constructor.
       *
       * @param[in] service  The service instance is used to bind to the
       *            methods created from this resource instance.  This will be
       *            the service that methods are invoked on.
       */
      RevisionsResource(DriveService* service);

      /**
       * Standard destructor.
       */
      ~RevisionsResource() {}


      /**
       * Creates a new RevisionsResource_DeleteMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] file_id The ID of the file.
       * @param[in] revision_id The ID of the revision.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      RevisionsResource_DeleteMethod* NewDeleteMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& file_id,
          const StringPiece& revision_id) const;

      /**
       * Creates a new RevisionsResource_GetMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] file_id The ID of the file.
       * @param[in] revision_id The ID of the revision.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      RevisionsResource_GetMethod* NewGetMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& file_id,
          const StringPiece& revision_id) const;

      /**
       * Creates a new RevisionsResource_ListMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] file_id The ID of the file.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      RevisionsResource_ListMethod* NewListMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& file_id) const;

      /**
       * Creates a new RevisionsResource_PatchMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] file_id The ID for the file.
       * @param[in] revision_id The ID for the revision.
       * @param[in] _content_ The data object to patch.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      RevisionsResource_PatchMethod* NewPatchMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& file_id,
          const StringPiece& revision_id,
          const Revision& _content_) const;

      /**
       * Creates a new RevisionsResource_UpdateMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] file_id The ID for the file.
       * @param[in] revision_id The ID for the revision.
       * @param[in] _content_ The data object to update.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      RevisionsResource_UpdateMethod* NewUpdateMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& file_id,
          const StringPiece& revision_id,
          const Revision& _content_) const;

     private:
      DriveService* service_;

      DISALLOW_COPY_AND_ASSIGN(RevisionsResource);
    };




  /**
   * Standard constructor.
   *
   * @param[in] transport  The transport to use when creating methods to invoke
   *                       on this service instance.
   */
  explicit DriveService(client::HttpTransport* transport);

  /**
   * Standard destructor.
   */
  virtual ~DriveService();

  /**
   * Gets the  resource method factory.
   *
   * @return AboutResource for creating methods.
   */
  const AboutResource& get_about() const {
    return about_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return AppsResource for creating methods.
   */
  const AppsResource& get_apps() const {
    return apps_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return ChangesResource for creating methods.
   */
  const ChangesResource& get_changes() const {
    return changes_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return ChannelsResource for creating methods.
   */
  const ChannelsResource& get_channels() const {
    return channels_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return ChildrenResource for creating methods.
   */
  const ChildrenResource& get_children() const {
    return children_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return CommentsResource for creating methods.
   */
  const CommentsResource& get_comments() const {
    return comments_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return FilesResource for creating methods.
   */
  const FilesResource& get_files() const {
    return files_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return ParentsResource for creating methods.
   */
  const ParentsResource& get_parents() const {
    return parents_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return PermissionsResource for creating methods.
   */
  const PermissionsResource& get_permissions() const {
    return permissions_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return PropertiesResource for creating methods.
   */
  const PropertiesResource& get_properties() const {
    return properties_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return RealtimeResource for creating methods.
   */
  const RealtimeResource& get_realtime() const {
    return realtime_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return RepliesResource for creating methods.
   */
  const RepliesResource& get_replies() const {
    return replies_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return RevisionsResource for creating methods.
   */
  const RevisionsResource& get_revisions() const {
    return revisions_;
  }

  /**
   * Declares the OAuth2.0 scopes used within Drive API
   *
   * These scopes shoudl be used when asking for credentials to invoke methods
   * in the DriveService.
   */
  class SCOPES {
   public:
    /**
     * View and manage the files and documents in your Google Drive.
     */
    static const StringPiece DRIVE;

    /**
     * View and manage its own configuration data in your Google Drive.
     */
    static const StringPiece DRIVE_APPDATA;

    /**
     * View your Google Drive apps.
     */
    static const StringPiece DRIVE_APPS_READONLY;

    /**
     * View and manage Google Drive files that you have opened or created with
     * this app.
     */
    static const StringPiece DRIVE_FILE;

    /**
     * View metadata for files and documents in your Google Drive.
     */
    static const StringPiece DRIVE_METADATA_READONLY;

    /**
     * View the files and documents in your Google Drive.
     */
    static const StringPiece DRIVE_READONLY;

    /**
     * Modify your Google Apps Script scripts' behavior.
     */
    static const StringPiece DRIVE_SCRIPTS;

   private:
    SCOPES();   // Never instantiated.
    ~SCOPES();  // Never instantiated.
  };

 private:
  AboutResource about_;
  AppsResource apps_;
  ChangesResource changes_;
  ChannelsResource channels_;
  ChildrenResource children_;
  CommentsResource comments_;
  FilesResource files_;
  ParentsResource parents_;
  PermissionsResource permissions_;
  PropertiesResource properties_;
  RealtimeResource realtime_;
  RepliesResource replies_;
  RevisionsResource revisions_;

  DISALLOW_COPY_AND_ASSIGN(DriveService);
};


/**
 * @defgroup DataObject Drive API Data Objects
 *
 * The data objects are used as parameters and responses from service requests.
 * For more information about using data objects, see the
 * <a href='https://developers.google.com/api-client-library/cpp/'>
 * Google APIs Client Library for C++ Developers's Guide</a>.
 */

/**
 * @defgroup ServiceClass Drive API Service
 *
 * The service classes contain information about accessing and using the
 * Drive API cloud service.
 *
 * For more information about using services, see the
 * <a href='https://developers.google.com/api-client-library/cpp/'>
 * Google APIs Client Library for C++ Developers's Guide</a>.
 */

/**
 * @defgroup ServiceMethod Drive API Service Methods
 *
 * The service method classes are used to create and invoke methods in the
 * DriveService to access the Drive API.
 *
 * For more information about using services, see the
 * <a href='https://developers.google.com/api-client-library/cpp/'>
 * Google APIs Client Library for C++ Developers's Guide</a>.
 */
}  // namespace google_drive_api
#endif  // GOOGLE_DRIVE_API_DRIVE_SERVICE_H_
